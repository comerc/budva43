version: '3'

tasks:
  default:
    # Эта задача выполняется по умолчанию при вызове 'task' без аргументов.
    # Она скрыта из списка, так как у нее нет 'desc'.
    cmds:
      - task --list
      - echo "task <name> --summary"
    silent: true

  log:
    desc: "Load and filter log (next lines)"
    summary: |
      Просмотр логов в реальном времени с jq-фильтром.

      ПРИМЕНЕНИЕ:
        task log -- '[jq-фильтр]'

      ДОСТУПНЫЕ ПОЛЯ: .level, .msg, .source etc.

      ПРИМЕРЫ:
        task log -- '.level != "DEBUG"'
        task log -- 'select(.msg | contains("error"))'

      СОВЕТ: Для разработки фильтров используйте jqp.
    cmds:
      # Запускаем скрипт в фоне (&) и ждем его завершения (wait).
      # Это позволяет избежать сообщения об ошибке от Task при нажатии Ctrl+C.
      - |
        SUBPROJECT=engine \
        TAIL_ARGS="-0" ./script/log.sh {{.CLI_ARGS}} & wait
    silent: true

  log-all:
    desc: "Load and filter log (all lines)"
    summary: |
      Просмотр логов в реальном времени с jq-фильтром.

      ПРИМЕНЕНИЕ:
        task log-all -- '[jq-фильтр]'

      ДОСТУПНЫЕ ПОЛЯ: .level, .msg, .source etc.

      ПРИМЕРЫ:
        task log-all -- '.level != "DEBUG"'
        task log-all -- 'select(.msg | contains("error"))'

      СОВЕТ: Для разработки фильтров используйте jqp.
    cmds:
      # Запускаем скрипт в фоне (&) и ждем его завершения (wait).
      # Это позволяет избежать сообщения об ошибке от Task при нажатии Ctrl+C.
      - |
        SUBPROJECT=engine \
        TAIL_ARGS="-n +1" ./script/log.sh {{.CLI_ARGS}} & wait
    silent: true

  jqp:
    desc: "Run jqp on app.log"
    summary: |
      Run jqp on app.log file.
    cmds:
      - |
        SUBPROJECT=engine \
        ./script/jqp.sh {{.CLI_ARGS}}
    silent: true

  lint:
    desc: "Run linters"
    summary: |
      Run linters.
    cmds:
      - GOEXPERIMENT=synctest golangci-lint run
      - GOEXPERIMENT=synctest unused-interface-methods ./...
    silent: true

  test-short:
    desc: "Run short tests"
    summary: |
      Run short tests.
    cmds:
      - GOEXPERIMENT=synctest go test -short -failfast -race -count=1 $(go list ./... | grep -v mocks)

  test:
    desc: "Run all tests"
    summary: |
      Run all tests.
    cmds:
      - GOEXPERIMENT=synctest go test -failfast -count=1 $(go list ./... | grep -v mocks)

  build:
    desc: "Build apps"
    summary: |
      Build apps.
    cmds:
      - mkdir -p bin
      - rm -f bin/engine && go build -o bin/engine cmd/engine/main.go
      - rm -f bin/facade && go build -o bin/facade cmd/facade/main.go
    silent: true

  engine:
    desc: "Run engine"
    summary: |
      Run engine.
    cmds:
      - |
        BUDVA43__GENERAL__ENGINE_CONFIG_FILE=engine.e2e.yml \
        SUBPROJECT=engine \
        go run cmd/engine/main.go & wait
    silent: true

  facade:
    desc: "Run facade"
    summary: |
      Run facade.
    cmds:
      - |
        SUBPROJECT=facade \
        go run cmd/facade/main.go & wait
    silent: true

  cover:
    desc: "Run coverage"
    summary: |
      Run coverage.
    cmds: 
      - ./script/cover.sh
      - ./script/after_cover.sh
    # silent: true

  coverage:
    desc: "View coverage"
    summary: |
      View coverage.
    cmds:
      - go tool cover -html=.coverage/.txt
    silent: true

  gql:
    desc: "Generage GraphQL"
    summary: |
      Generage GraphQL.
    cmds:
      - go run github.com/99designs/gqlgen generate
    # silent: true

  grpc:
    desc: "Generage GRPC"
    summary: |
      Generage GRPC.
    cmds:
      - protoc --go_out=paths=source_relative:. --go-grpc_out=paths=source_relative:. transport/grpc/pb/telegram.proto
    # silent: true

  kill-port:
    desc: "Kill port 7070"
    summary: |
      Kill port 7070.
    cmds:
      - lsof -ti:7070 | xargs kill -9

  all:
    desc: "Run tasks: lint -> test -> build"
    summary: |
      Выполнить все задачи: lint -> test -> build.
    cmds:
      - task lint
      - task test
      - task build
