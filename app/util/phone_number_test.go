package util

import (
	"strings"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestMaskPhoneNumber(t *testing.T) {
	t.Parallel()

	tests := []struct {
		name     string
		phone    string
		expected string
	}{
		{
			name:     "standard_phone_number",
			phone:    "+7 926 111 22 33",
			expected: "+7926*****33",
		},
		{
			name:     "phone_number_without_spaces",
			phone:    "+79261112233",
			expected: "+7926*****33",
		},
		{
			name:     "phone_number_with_dashes",
			phone:    "+7-926-111-22-33",
			expected: "+7926*****33",
		},
		{
			name:     "short_phone_number",
			phone:    "12345",
			expected: "***45",
		},
		{
			name:     "very_short_number-2_chars",
			phone:    "12",
			expected: "**", // –ü–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏, –µ—Å–ª–∏ –¥–ª–∏–Ω–∞ <= 2, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è "**"
		},
		{
			name:     "very_short_number-1_char",
			phone:    "1",
			expected: "**", // –ü–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏, –µ—Å–ª–∏ –¥–ª–∏–Ω–∞ <= 2, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è "**"
		},
		{
			name:     "empty_number",
			phone:    "",
			expected: "**", // –°–æ–≥–ª–∞—Å–Ω–æ –ª–æ–≥–∏–∫–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏—Ö –Ω–æ–º–µ—Ä–æ–≤
		},
		{
			name:     "international_format_number",
			phone:    "+38 067 123 45 67",
			expected: "+38067*****67", // –£—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
		},
		{
			name:     "number_with_letters",
			phone:    "+7 (XXX) 123-45-67",
			expected: "+7(XXX)*****67",
		},
		{
			name:     "number_with_7_chars-border",
			phone:    "1234567",
			expected: "*****67",
		},
		{
			name:     "number_with_8_chars-1_visible_prefix",
			phone:    "12345678",
			expected: "1*****78",
		},
		{
			name:     "number_with_spaces_at_start_and_end",
			phone:    "  +7 926  123  45  67  ",
			expected: "+7926*****67",
		},
		{
			name:     "very_long_number",
			phone:    "+7926123456789012345",
			expected: "+792612345678*****45",
		},
		{
			name:     "number_with_non_digit_symbols",
			phone:    "–ê–ë–íabcdefghij",
			expected: "–ê–ë–íabc*****ij",
		},
		{
			name:     "number_with_special_symbols",
			phone:    "+7@#$%^&*()_+12345",
			expected: "+7@#$%^&*()*****45", // –°–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 —Å–∏–º–≤–æ–ª–∞
		},
		{
			name:     "number_with_other_special_symbols",
			phone:    "!@#$%^1234567",
			expected: "!@#$%^*****67",
		},
		{
			name:     "number_with_unicode_symbols",
			phone:    "üôÉ+79261234567",
			expected: "üôÉ+7926*****67",
		},
		{
			name:     "number_with_6_chars-one_less_than_border",
			phone:    "123456",
			expected: "****56",
		},
		{
			name:     "number_with_3_chars-minimal_for_masking",
			phone:    "123",
			expected: "*23",
		},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			t.Parallel()

			result := MaskPhoneNumber(test.phone)
			assert.Equal(t, test.expected, result, "–ù–µ–≤–µ—Ä–Ω–∞—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –Ω–æ–º–µ—Ä–∞: %s", test.phone)
		})
	}
}

// TestMaskPhoneNumberPropertyBased –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–≤–æ–π—Å—Ç–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏—è
func TestMaskPhoneNumberPropertyBased(t *testing.T) {
	t.Parallel()

	// –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∏ –∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–º–µ—é—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—É—é –¥–ª–∏–Ω—É
	// –¥–ª—è –Ω–æ–º–µ—Ä–æ–≤ –¥–ª–∏–Ω–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤
	phones := []string{
		"+79261234567",
		"12345",
		"1234567890",
		"ABCDEFGHIJK",
	}

	for _, phone := range phones {
		cleanPhone := strings.ReplaceAll(strings.ReplaceAll(phone, " ", ""), "-", "")
		if len(cleanPhone) > 2 {
			result := MaskPhoneNumber(phone)
			assert.Equal(t, len(cleanPhone), len(result),
				"–î–ª–∏–Ω–∞ –∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –¥–ª–∏–Ω–æ–π –∏—Å—Ö–æ–¥–Ω–æ–≥–æ: %s", phone)
		}
	}
}
