#!/bin/bash
set -e  # –≤—ã—Ö–æ–¥ –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ
set -o pipefail  # –≤—ã—Ö–æ–¥ –ø—Ä–∏ –æ—à–∏–±–∫–µ –≤ –ª—é–±–æ–π –∫–æ–º–∞–Ω–¥–µ –ø–∞–π–ø–ª–∞–π–Ω–∞

echo "üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞ budva43..."

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –û–°
OS=$(uname -s)
case "$OS" in
    Linux*)     PLATFORM="linux";;
    Darwin*)    PLATFORM="macos";;
    CYGWIN*)    PLATFORM="windows";;
    MINGW*)     PLATFORM="windows";;
    *)          echo "‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –û–°: $OS"; exit 1;;
esac

echo "üìã –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: $PLATFORM"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Go –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
install_go_tools() {
    echo "üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Go –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤..."
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    go install github.com/vektra/mockery/v2@v2.53.3
    go install github.com/golangci/golangci-lint/v2/cmd/golangci-lint@latest
    # go install github.com/mailru/easyjson/...@latest
    go install github.com/99designs/gqlgen@latest
    go install github.com/unused-interface-methods/unused-interface-methods@latest
    go install github.com/error-log-or-return/error-log-or-return@latest
    go install github.com/go-task/task/v3/cmd/task@latest
    go install github.com/michurin/human-readable-json-logging/cmd/...@latest

    # BDD —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    go install github.com/cucumber/godog/cmd/godog@latest
    
    # Protocol Buffers
    go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
    go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
    
    # gRPC –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    go install github.com/fullstorydev/grpcurl/cmd/grpcurl@latest
    
    # JSON –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    go install github.com/itchyny/gojq/cmd/gojq@latest
    go install github.com/noahgorstein/jqp@latest
    
    echo "‚úÖ Go –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–∞ Ubuntu/Debian
install_linux_deps() {
    echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (Ubuntu/Debian)..."
    
    sudo apt-get update
    sudo apt-get install -y \
        git \
        curl \
        wget \
        build-essential \
        pkg-config \
        libssl-dev \
        zlib1g-dev \
        libstdc++6 \
        bash \
        tar \
        lsof \
        ffmpeg \
        yt-dlp \
        protobuf-compiler
    
    echo "‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–∞ macOS
install_macos_deps() {
    echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (macOS)..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Homebrew
    if ! command -v brew >/dev/null 2>&1; then
        echo "‚ùå Homebrew –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: https://brew.sh"
        exit 1
    fi
    
    brew install \
        git \
        curl \
        wget \
        bash \
        lsof \
        ffmpeg \
        yt-dlp \
        git-filter-repo \
        protobuf \
        grpcurl
    
    echo "‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –Ω–∞ Windows
install_windows_deps() {
    echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (Windows)..."
    
    # –°–ø–∏—Å–æ–∫ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è Windows
    WINDOWS_DEPS="git ffmpeg yt-dlp protobuf"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞–∫–µ—Ç–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
    HAS_CHOCO=false
    HAS_SCOOP=false
    
    if command -v choco >/dev/null 2>&1; then
        HAS_CHOCO=true
        echo "‚úÖ –ù–∞–π–¥–µ–Ω Chocolatey"
    fi
    
    if command -v scoop >/dev/null 2>&1; then
        HAS_SCOOP=true
        echo "‚úÖ –ù–∞–π–¥–µ–Ω Scoop"
    fi
    
    # –ï—Å–ª–∏ –æ–±–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±–æ—Ä
    if [ "$HAS_CHOCO" = true ] && [ "$HAS_SCOOP" = true ]; then
        echo ""
        echo "ü§î –ù–∞–π–¥–µ–Ω—ã –æ–±–∞ –ø–∞–∫–µ—Ç–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–∞. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω:"
        echo "1) Chocolatey (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)"
        echo "2) Scoop"
        echo ""
        read -p "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1 –∏–ª–∏ 2): " -n 1 -r
        echo
        
        if [[ $REPLY =~ ^[1]$ ]]; then
            echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ Chocolatey..."
            choco install -y $WINDOWS_DEPS
            echo "‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ Chocolatey"
        elif [[ $REPLY =~ ^[2]$ ]]; then
            echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ Scoop..."
            scoop install $WINDOWS_DEPS
            echo "‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ Scoop"
        else
            echo "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã."
            exit 1
        fi
    elif [ "$HAS_CHOCO" = true ]; then
        echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ Chocolatey..."
        choco install -y $WINDOWS_DEPS
        echo "‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ Chocolatey"
    elif [ "$HAS_SCOOP" = true ]; then
        echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ Scoop..."
        scoop install $WINDOWS_DEPS
        echo "‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ Scoop"
    else
        echo "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –æ–¥–∏–Ω –ø–∞–∫–µ—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä"
        echo "üì• –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø–∞–∫–µ—Ç–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤:"
        echo ""
        echo "Chocolatey (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è):"
        echo "  Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))"
        echo ""
        echo "Scoop:"
        echo "  Set-ExecutionPolicy RemoteSigned -Scope CurrentUser"
        echo "  irm get.scoop.sh | iex"
        echo ""
        echo "–ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞"
        exit 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
setup_config() {
    echo "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
    
    # –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if [ ! -f .config/.private/.env ]; then
        mkdir -p .config/.private
        touch .config/.private/.env
        echo "‚úÖ –°–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π .env —Ñ–∞–π–ª"
    fi
    
    echo "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Go
check_go() {
    if ! command -v go >/dev/null 2>&1; then
        echo "‚ùå Go –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        echo "üì• –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–µ—Ä–µ–∑ g (Golang Version Manager):"
        echo "  curl -sSL https://git.io/g-install | sh -s"
        echo "  –∏–ª–∏ —Å–∫–∞—á–∞–π—Ç–µ –Ω–∞–ø—Ä—è–º—É—é: https://golang.org/dl/"
        exit 1
    fi
    
    echo "‚úÖ Go: $(go version)"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ g
    if command -v g >/dev/null 2>&1; then
        echo "‚úÖ g (Golang Version Manager): $(g version)"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ PATH
check_path() {
    echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ PATH..."
    
    GOPATH=$(go env GOPATH)
    if [ -z "$GOPATH" ]; then
        echo "‚ö†Ô∏è  GOPATH –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
    
    echo "üìÅ GOPATH: $GOPATH"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ GOPATH/bin –≤ PATH
    if [[ ":$PATH:" == *":$GOPATH/bin:"* ]]; then
        echo "‚úÖ PATH –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
    else
        echo "‚ö†Ô∏è  GOPATH/bin –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH"
        echo "üí° –í—ã–ø–æ–ª–Ω–∏—Ç–µ: make path"
        exit 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Docker (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
check_docker() {
    if command -v docker >/dev/null 2>&1; then
        echo "‚úÖ Docker: $(docker --version)"
    else
        echo "‚ö†Ô∏è  Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
suggest_extensions() {
    echo "üîß –†–∞—Å—à–∏—Ä–µ–Ω–∏—è VS Code:"
    echo "  üìù –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ script/ext.sh –ø–æ —Å–≤–æ–µ–º—É —É—Å–º–æ—Ç—Ä–µ–Ω–∏—é"
    echo "  üöÄ –í—ã–ø–æ–ª–Ω–∏—Ç–µ: task ext"
}

# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
main() {
    echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    check_go
    check_path
    check_docker
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    case "$PLATFORM" in
        linux)
            install_linux_deps
            ;;
        macos)
            install_macos_deps
            ;;
        windows)
            install_windows_deps
            ;;
    esac
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    setup_config
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Go –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    install_go_tools
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º Go –º–æ–¥—É–ª–∏
    echo "üì¶ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Go –º–æ–¥—É–ª–µ–π..."
    task mod
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è VS Code
    suggest_extensions
    
    echo ""
    echo "üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
    echo ""
    echo "üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
    echo "  task - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
    echo "  task <name> --summary - –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã <name>"
}

# –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
main "$@" 