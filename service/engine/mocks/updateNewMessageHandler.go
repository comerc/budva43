// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	client "github.com/zelenin/go-tdlib/client"

	mock "github.com/stretchr/testify/mock"
)

// UpdateNewMessageHandler is an autogenerated mock type for the updateNewMessageHandler type
type UpdateNewMessageHandler struct {
	mock.Mock
}

type UpdateNewMessageHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *UpdateNewMessageHandler) EXPECT() *UpdateNewMessageHandler_Expecter {
	return &UpdateNewMessageHandler_Expecter{mock: &_m.Mock}
}

// Run provides a mock function with given fields: ctx, update
func (_m *UpdateNewMessageHandler) Run(ctx context.Context, update *client.UpdateNewMessage) {
	_m.Called(ctx, update)
}

// UpdateNewMessageHandler_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type UpdateNewMessageHandler_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - ctx context.Context
//   - update *client.UpdateNewMessage
func (_e *UpdateNewMessageHandler_Expecter) Run(ctx interface{}, update interface{}) *UpdateNewMessageHandler_Run_Call {
	return &UpdateNewMessageHandler_Run_Call{Call: _e.mock.On("Run", ctx, update)}
}

func (_c *UpdateNewMessageHandler_Run_Call) Run(run func(ctx context.Context, update *client.UpdateNewMessage)) *UpdateNewMessageHandler_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*client.UpdateNewMessage))
	})
	return _c
}

func (_c *UpdateNewMessageHandler_Run_Call) Return() *UpdateNewMessageHandler_Run_Call {
	_c.Call.Return()
	return _c
}

func (_c *UpdateNewMessageHandler_Run_Call) RunAndReturn(run func(context.Context, *client.UpdateNewMessage)) *UpdateNewMessageHandler_Run_Call {
	_c.Run(run)
	return _c
}

// NewUpdateNewMessageHandler creates a new instance of UpdateNewMessageHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUpdateNewMessageHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *UpdateNewMessageHandler {
	mock := &UpdateNewMessageHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
