// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// LoaderService is an autogenerated mock type for the loaderService type
type LoaderService struct {
	mock.Mock
}

type LoaderService_Expecter struct {
	mock *mock.Mock
}

func (_m *LoaderService) EXPECT() *LoaderService_Expecter {
	return &LoaderService_Expecter{mock: &_m.Mock}
}

// Run provides a mock function with no fields
func (_m *LoaderService) Run() {
	_m.Called()
}

// LoaderService_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type LoaderService_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
func (_e *LoaderService_Expecter) Run() *LoaderService_Run_Call {
	return &LoaderService_Run_Call{Call: _e.mock.On("Run")}
}

func (_c *LoaderService_Run_Call) Run(run func()) *LoaderService_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LoaderService_Run_Call) Return() *LoaderService_Run_Call {
	_c.Call.Return()
	return _c
}

func (_c *LoaderService_Run_Call) RunAndReturn(run func()) *LoaderService_Run_Call {
	_c.Run(run)
	return _c
}

// NewLoaderService creates a new instance of LoaderService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLoaderService(t interface {
	mock.TestingT
	Cleanup(func())
}) *LoaderService {
	mock := &LoaderService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
