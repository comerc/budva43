// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	client "github.com/zelenin/go-tdlib/client"

	mock "github.com/stretchr/testify/mock"
)

// TelegramRepo is an autogenerated mock type for the telegramRepo type
type TelegramRepo struct {
	mock.Mock
}

type TelegramRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *TelegramRepo) EXPECT() *TelegramRepo_Expecter {
	return &TelegramRepo_Expecter{mock: &_m.Mock}
}

// GetClientDone provides a mock function with no fields
func (_m *TelegramRepo) GetClientDone() <-chan interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetClientDone")
	}

	var r0 <-chan interface{}
	if rf, ok := ret.Get(0).(func() <-chan interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan interface{})
		}
	}

	return r0
}

// TelegramRepo_GetClientDone_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClientDone'
type TelegramRepo_GetClientDone_Call struct {
	*mock.Call
}

// GetClientDone is a helper method to define mock.On call
func (_e *TelegramRepo_Expecter) GetClientDone() *TelegramRepo_GetClientDone_Call {
	return &TelegramRepo_GetClientDone_Call{Call: _e.mock.On("GetClientDone")}
}

func (_c *TelegramRepo_GetClientDone_Call) Run(run func()) *TelegramRepo_GetClientDone_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TelegramRepo_GetClientDone_Call) Return(_a0 <-chan interface{}) *TelegramRepo_GetClientDone_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TelegramRepo_GetClientDone_Call) RunAndReturn(run func() <-chan interface{}) *TelegramRepo_GetClientDone_Call {
	_c.Call.Return(run)
	return _c
}

// GetListener provides a mock function with no fields
func (_m *TelegramRepo) GetListener() *client.Listener {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetListener")
	}

	var r0 *client.Listener
	if rf, ok := ret.Get(0).(func() *client.Listener); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Listener)
		}
	}

	return r0
}

// TelegramRepo_GetListener_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetListener'
type TelegramRepo_GetListener_Call struct {
	*mock.Call
}

// GetListener is a helper method to define mock.On call
func (_e *TelegramRepo_Expecter) GetListener() *TelegramRepo_GetListener_Call {
	return &TelegramRepo_GetListener_Call{Call: _e.mock.On("GetListener")}
}

func (_c *TelegramRepo_GetListener_Call) Run(run func()) *TelegramRepo_GetListener_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TelegramRepo_GetListener_Call) Return(_a0 *client.Listener) *TelegramRepo_GetListener_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TelegramRepo_GetListener_Call) RunAndReturn(run func() *client.Listener) *TelegramRepo_GetListener_Call {
	_c.Call.Return(run)
	return _c
}

// NewTelegramRepo creates a new instance of TelegramRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTelegramRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *TelegramRepo {
	mock := &TelegramRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
