// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	client "github.com/zelenin/go-tdlib/client"

	mock "github.com/stretchr/testify/mock"
)

// UpdateMessageSendHandler is an autogenerated mock type for the updateMessageSendHandler type
type UpdateMessageSendHandler struct {
	mock.Mock
}

type UpdateMessageSendHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *UpdateMessageSendHandler) EXPECT() *UpdateMessageSendHandler_Expecter {
	return &UpdateMessageSendHandler_Expecter{mock: &_m.Mock}
}

// Run provides a mock function with given fields: update
func (_m *UpdateMessageSendHandler) Run(update *client.UpdateMessageSendSucceeded) {
	_m.Called(update)
}

// UpdateMessageSendHandler_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type UpdateMessageSendHandler_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - update *client.UpdateMessageSendSucceeded
func (_e *UpdateMessageSendHandler_Expecter) Run(update interface{}) *UpdateMessageSendHandler_Run_Call {
	return &UpdateMessageSendHandler_Run_Call{Call: _e.mock.On("Run", update)}
}

func (_c *UpdateMessageSendHandler_Run_Call) Run(run func(update *client.UpdateMessageSendSucceeded)) *UpdateMessageSendHandler_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*client.UpdateMessageSendSucceeded))
	})
	return _c
}

func (_c *UpdateMessageSendHandler_Run_Call) Return() *UpdateMessageSendHandler_Run_Call {
	_c.Call.Return()
	return _c
}

func (_c *UpdateMessageSendHandler_Run_Call) RunAndReturn(run func(*client.UpdateMessageSendSucceeded)) *UpdateMessageSendHandler_Run_Call {
	_c.Run(run)
	return _c
}

// NewUpdateMessageSendHandler creates a new instance of UpdateMessageSendHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUpdateMessageSendHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *UpdateMessageSendHandler {
	mock := &UpdateMessageSendHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
