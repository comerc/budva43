// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	domain "github.com/comerc/budva43/app/domain"
	client "github.com/zelenin/go-tdlib/client"

	mock "github.com/stretchr/testify/mock"
)

// TransformService is an autogenerated mock type for the transformService type
type TransformService struct {
	mock.Mock
}

type TransformService_Expecter struct {
	mock *mock.Mock
}

func (_m *TransformService) EXPECT() *TransformService_Expecter {
	return &TransformService_Expecter{mock: &_m.Mock}
}

// AddNextLink provides a mock function with given fields: formattedText, srcChatId, dstChatId, newMessageId, engineConfig
func (_m *TransformService) AddNextLink(formattedText *client.FormattedText, srcChatId int64, dstChatId int64, newMessageId int64, engineConfig *domain.EngineConfig) {
	_m.Called(formattedText, srcChatId, dstChatId, newMessageId, engineConfig)
}

// TransformService_AddNextLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddNextLink'
type TransformService_AddNextLink_Call struct {
	*mock.Call
}

// AddNextLink is a helper method to define mock.On call
//   - formattedText *client.FormattedText
//   - srcChatId int64
//   - dstChatId int64
//   - newMessageId int64
//   - engineConfig *domain.EngineConfig
func (_e *TransformService_Expecter) AddNextLink(formattedText interface{}, srcChatId interface{}, dstChatId interface{}, newMessageId interface{}, engineConfig interface{}) *TransformService_AddNextLink_Call {
	return &TransformService_AddNextLink_Call{Call: _e.mock.On("AddNextLink", formattedText, srcChatId, dstChatId, newMessageId, engineConfig)}
}

func (_c *TransformService_AddNextLink_Call) Run(run func(formattedText *client.FormattedText, srcChatId int64, dstChatId int64, newMessageId int64, engineConfig *domain.EngineConfig)) *TransformService_AddNextLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*client.FormattedText), args[1].(int64), args[2].(int64), args[3].(int64), args[4].(*domain.EngineConfig))
	})
	return _c
}

func (_c *TransformService_AddNextLink_Call) Return() *TransformService_AddNextLink_Call {
	_c.Call.Return()
	return _c
}

func (_c *TransformService_AddNextLink_Call) RunAndReturn(run func(*client.FormattedText, int64, int64, int64, *domain.EngineConfig)) *TransformService_AddNextLink_Call {
	_c.Run(run)
	return _c
}

// Transform provides a mock function with given fields: formattedText, withSources, src, dstChatId, prevMessageId, engineConfig
func (_m *TransformService) Transform(formattedText *client.FormattedText, withSources bool, src *client.Message, dstChatId int64, prevMessageId int64, engineConfig *domain.EngineConfig) {
	_m.Called(formattedText, withSources, src, dstChatId, prevMessageId, engineConfig)
}

// TransformService_Transform_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Transform'
type TransformService_Transform_Call struct {
	*mock.Call
}

// Transform is a helper method to define mock.On call
//   - formattedText *client.FormattedText
//   - withSources bool
//   - src *client.Message
//   - dstChatId int64
//   - prevMessageId int64
//   - engineConfig *domain.EngineConfig
func (_e *TransformService_Expecter) Transform(formattedText interface{}, withSources interface{}, src interface{}, dstChatId interface{}, prevMessageId interface{}, engineConfig interface{}) *TransformService_Transform_Call {
	return &TransformService_Transform_Call{Call: _e.mock.On("Transform", formattedText, withSources, src, dstChatId, prevMessageId, engineConfig)}
}

func (_c *TransformService_Transform_Call) Run(run func(formattedText *client.FormattedText, withSources bool, src *client.Message, dstChatId int64, prevMessageId int64, engineConfig *domain.EngineConfig)) *TransformService_Transform_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*client.FormattedText), args[1].(bool), args[2].(*client.Message), args[3].(int64), args[4].(int64), args[5].(*domain.EngineConfig))
	})
	return _c
}

func (_c *TransformService_Transform_Call) Return() *TransformService_Transform_Call {
	_c.Call.Return()
	return _c
}

func (_c *TransformService_Transform_Call) RunAndReturn(run func(*client.FormattedText, bool, *client.Message, int64, int64, *domain.EngineConfig)) *TransformService_Transform_Call {
	_c.Run(run)
	return _c
}

// NewTransformService creates a new instance of TransformService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransformService(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransformService {
	mock := &TransformService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
