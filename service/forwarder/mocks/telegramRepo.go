// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	client "github.com/zelenin/go-tdlib/client"

	mock "github.com/stretchr/testify/mock"
)

// TelegramRepo is an autogenerated mock type for the telegramRepo type
type TelegramRepo struct {
	mock.Mock
}

type TelegramRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *TelegramRepo) EXPECT() *TelegramRepo_Expecter {
	return &TelegramRepo_Expecter{mock: &_m.Mock}
}

// ForwardMessages provides a mock function with given fields: _a0
func (_m *TelegramRepo) ForwardMessages(_a0 *client.ForwardMessagesRequest) (*client.Messages, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ForwardMessages")
	}

	var r0 *client.Messages
	var r1 error
	if rf, ok := ret.Get(0).(func(*client.ForwardMessagesRequest) (*client.Messages, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*client.ForwardMessagesRequest) *client.Messages); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Messages)
		}
	}

	if rf, ok := ret.Get(1).(func(*client.ForwardMessagesRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TelegramRepo_ForwardMessages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ForwardMessages'
type TelegramRepo_ForwardMessages_Call struct {
	*mock.Call
}

// ForwardMessages is a helper method to define mock.On call
//   - _a0 *client.ForwardMessagesRequest
func (_e *TelegramRepo_Expecter) ForwardMessages(_a0 interface{}) *TelegramRepo_ForwardMessages_Call {
	return &TelegramRepo_ForwardMessages_Call{Call: _e.mock.On("ForwardMessages", _a0)}
}

func (_c *TelegramRepo_ForwardMessages_Call) Run(run func(_a0 *client.ForwardMessagesRequest)) *TelegramRepo_ForwardMessages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*client.ForwardMessagesRequest))
	})
	return _c
}

func (_c *TelegramRepo_ForwardMessages_Call) Return(_a0 *client.Messages, _a1 error) *TelegramRepo_ForwardMessages_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TelegramRepo_ForwardMessages_Call) RunAndReturn(run func(*client.ForwardMessagesRequest) (*client.Messages, error)) *TelegramRepo_ForwardMessages_Call {
	_c.Call.Return(run)
	return _c
}

// GetMessage provides a mock function with given fields: _a0
func (_m *TelegramRepo) GetMessage(_a0 *client.GetMessageRequest) (*client.Message, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetMessage")
	}

	var r0 *client.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(*client.GetMessageRequest) (*client.Message, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*client.GetMessageRequest) *client.Message); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(*client.GetMessageRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TelegramRepo_GetMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMessage'
type TelegramRepo_GetMessage_Call struct {
	*mock.Call
}

// GetMessage is a helper method to define mock.On call
//   - _a0 *client.GetMessageRequest
func (_e *TelegramRepo_Expecter) GetMessage(_a0 interface{}) *TelegramRepo_GetMessage_Call {
	return &TelegramRepo_GetMessage_Call{Call: _e.mock.On("GetMessage", _a0)}
}

func (_c *TelegramRepo_GetMessage_Call) Run(run func(_a0 *client.GetMessageRequest)) *TelegramRepo_GetMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*client.GetMessageRequest))
	})
	return _c
}

func (_c *TelegramRepo_GetMessage_Call) Return(_a0 *client.Message, _a1 error) *TelegramRepo_GetMessage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TelegramRepo_GetMessage_Call) RunAndReturn(run func(*client.GetMessageRequest) (*client.Message, error)) *TelegramRepo_GetMessage_Call {
	_c.Call.Return(run)
	return _c
}

// SendMessage provides a mock function with given fields: _a0
func (_m *TelegramRepo) SendMessage(_a0 *client.SendMessageRequest) (*client.Message, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SendMessage")
	}

	var r0 *client.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(*client.SendMessageRequest) (*client.Message, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*client.SendMessageRequest) *client.Message); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(*client.SendMessageRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TelegramRepo_SendMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMessage'
type TelegramRepo_SendMessage_Call struct {
	*mock.Call
}

// SendMessage is a helper method to define mock.On call
//   - _a0 *client.SendMessageRequest
func (_e *TelegramRepo_Expecter) SendMessage(_a0 interface{}) *TelegramRepo_SendMessage_Call {
	return &TelegramRepo_SendMessage_Call{Call: _e.mock.On("SendMessage", _a0)}
}

func (_c *TelegramRepo_SendMessage_Call) Run(run func(_a0 *client.SendMessageRequest)) *TelegramRepo_SendMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*client.SendMessageRequest))
	})
	return _c
}

func (_c *TelegramRepo_SendMessage_Call) Return(_a0 *client.Message, _a1 error) *TelegramRepo_SendMessage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TelegramRepo_SendMessage_Call) RunAndReturn(run func(*client.SendMessageRequest) (*client.Message, error)) *TelegramRepo_SendMessage_Call {
	_c.Call.Return(run)
	return _c
}

// SendMessageAlbum provides a mock function with given fields: _a0
func (_m *TelegramRepo) SendMessageAlbum(_a0 *client.SendMessageAlbumRequest) (*client.Messages, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SendMessageAlbum")
	}

	var r0 *client.Messages
	var r1 error
	if rf, ok := ret.Get(0).(func(*client.SendMessageAlbumRequest) (*client.Messages, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*client.SendMessageAlbumRequest) *client.Messages); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Messages)
		}
	}

	if rf, ok := ret.Get(1).(func(*client.SendMessageAlbumRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TelegramRepo_SendMessageAlbum_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMessageAlbum'
type TelegramRepo_SendMessageAlbum_Call struct {
	*mock.Call
}

// SendMessageAlbum is a helper method to define mock.On call
//   - _a0 *client.SendMessageAlbumRequest
func (_e *TelegramRepo_Expecter) SendMessageAlbum(_a0 interface{}) *TelegramRepo_SendMessageAlbum_Call {
	return &TelegramRepo_SendMessageAlbum_Call{Call: _e.mock.On("SendMessageAlbum", _a0)}
}

func (_c *TelegramRepo_SendMessageAlbum_Call) Run(run func(_a0 *client.SendMessageAlbumRequest)) *TelegramRepo_SendMessageAlbum_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*client.SendMessageAlbumRequest))
	})
	return _c
}

func (_c *TelegramRepo_SendMessageAlbum_Call) Return(_a0 *client.Messages, _a1 error) *TelegramRepo_SendMessageAlbum_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TelegramRepo_SendMessageAlbum_Call) RunAndReturn(run func(*client.SendMessageAlbumRequest) (*client.Messages, error)) *TelegramRepo_SendMessageAlbum_Call {
	_c.Call.Return(run)
	return _c
}

// NewTelegramRepo creates a new instance of TelegramRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTelegramRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *TelegramRepo {
	mock := &TelegramRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
