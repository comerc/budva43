// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// RateLimiterService is an autogenerated mock type for the rateLimiterService type
type RateLimiterService struct {
	mock.Mock
}

type RateLimiterService_Expecter struct {
	mock *mock.Mock
}

func (_m *RateLimiterService) EXPECT() *RateLimiterService_Expecter {
	return &RateLimiterService_Expecter{mock: &_m.Mock}
}

// WaitForForward provides a mock function with given fields: ctx, dstChatId
func (_m *RateLimiterService) WaitForForward(ctx context.Context, dstChatId int64) {
	_m.Called(ctx, dstChatId)
}

// RateLimiterService_WaitForForward_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WaitForForward'
type RateLimiterService_WaitForForward_Call struct {
	*mock.Call
}

// WaitForForward is a helper method to define mock.On call
//   - ctx context.Context
//   - dstChatId int64
func (_e *RateLimiterService_Expecter) WaitForForward(ctx interface{}, dstChatId interface{}) *RateLimiterService_WaitForForward_Call {
	return &RateLimiterService_WaitForForward_Call{Call: _e.mock.On("WaitForForward", ctx, dstChatId)}
}

func (_c *RateLimiterService_WaitForForward_Call) Run(run func(ctx context.Context, dstChatId int64)) *RateLimiterService_WaitForForward_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *RateLimiterService_WaitForForward_Call) Return() *RateLimiterService_WaitForForward_Call {
	_c.Call.Return()
	return _c
}

func (_c *RateLimiterService_WaitForForward_Call) RunAndReturn(run func(context.Context, int64)) *RateLimiterService_WaitForForward_Call {
	_c.Run(run)
	return _c
}

// NewRateLimiterService creates a new instance of RateLimiterService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRateLimiterService(t interface {
	mock.TestingT
	Cleanup(func())
}) *RateLimiterService {
	mock := &RateLimiterService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
