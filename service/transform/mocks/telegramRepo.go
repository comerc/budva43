// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	client "github.com/zelenin/go-tdlib/client"
)

// TelegramRepo is an autogenerated mock type for the telegramRepo type
type TelegramRepo struct {
	mock.Mock
}

type TelegramRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *TelegramRepo) EXPECT() *TelegramRepo_Expecter {
	return &TelegramRepo_Expecter{mock: &_m.Mock}
}

// GetCallbackQueryAnswer provides a mock function with given fields: _a0
func (_m *TelegramRepo) GetCallbackQueryAnswer(_a0 *client.GetCallbackQueryAnswerRequest) (*client.CallbackQueryAnswer, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetCallbackQueryAnswer")
	}

	var r0 *client.CallbackQueryAnswer
	var r1 error
	if rf, ok := ret.Get(0).(func(*client.GetCallbackQueryAnswerRequest) (*client.CallbackQueryAnswer, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*client.GetCallbackQueryAnswerRequest) *client.CallbackQueryAnswer); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.CallbackQueryAnswer)
		}
	}

	if rf, ok := ret.Get(1).(func(*client.GetCallbackQueryAnswerRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TelegramRepo_GetCallbackQueryAnswer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCallbackQueryAnswer'
type TelegramRepo_GetCallbackQueryAnswer_Call struct {
	*mock.Call
}

// GetCallbackQueryAnswer is a helper method to define mock.On call
//   - _a0 *client.GetCallbackQueryAnswerRequest
func (_e *TelegramRepo_Expecter) GetCallbackQueryAnswer(_a0 interface{}) *TelegramRepo_GetCallbackQueryAnswer_Call {
	return &TelegramRepo_GetCallbackQueryAnswer_Call{Call: _e.mock.On("GetCallbackQueryAnswer", _a0)}
}

func (_c *TelegramRepo_GetCallbackQueryAnswer_Call) Run(run func(_a0 *client.GetCallbackQueryAnswerRequest)) *TelegramRepo_GetCallbackQueryAnswer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*client.GetCallbackQueryAnswerRequest))
	})
	return _c
}

func (_c *TelegramRepo_GetCallbackQueryAnswer_Call) Return(_a0 *client.CallbackQueryAnswer, _a1 error) *TelegramRepo_GetCallbackQueryAnswer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TelegramRepo_GetCallbackQueryAnswer_Call) RunAndReturn(run func(*client.GetCallbackQueryAnswerRequest) (*client.CallbackQueryAnswer, error)) *TelegramRepo_GetCallbackQueryAnswer_Call {
	_c.Call.Return(run)
	return _c
}

// GetChat provides a mock function with given fields: _a0
func (_m *TelegramRepo) GetChat(_a0 *client.GetChatRequest) (*client.Chat, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetChat")
	}

	var r0 *client.Chat
	var r1 error
	if rf, ok := ret.Get(0).(func(*client.GetChatRequest) (*client.Chat, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*client.GetChatRequest) *client.Chat); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Chat)
		}
	}

	if rf, ok := ret.Get(1).(func(*client.GetChatRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TelegramRepo_GetChat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChat'
type TelegramRepo_GetChat_Call struct {
	*mock.Call
}

// GetChat is a helper method to define mock.On call
//   - _a0 *client.GetChatRequest
func (_e *TelegramRepo_Expecter) GetChat(_a0 interface{}) *TelegramRepo_GetChat_Call {
	return &TelegramRepo_GetChat_Call{Call: _e.mock.On("GetChat", _a0)}
}

func (_c *TelegramRepo_GetChat_Call) Run(run func(_a0 *client.GetChatRequest)) *TelegramRepo_GetChat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*client.GetChatRequest))
	})
	return _c
}

func (_c *TelegramRepo_GetChat_Call) Return(_a0 *client.Chat, _a1 error) *TelegramRepo_GetChat_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TelegramRepo_GetChat_Call) RunAndReturn(run func(*client.GetChatRequest) (*client.Chat, error)) *TelegramRepo_GetChat_Call {
	_c.Call.Return(run)
	return _c
}

// GetMessageLink provides a mock function with given fields: _a0
func (_m *TelegramRepo) GetMessageLink(_a0 *client.GetMessageLinkRequest) (*client.MessageLink, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetMessageLink")
	}

	var r0 *client.MessageLink
	var r1 error
	if rf, ok := ret.Get(0).(func(*client.GetMessageLinkRequest) (*client.MessageLink, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*client.GetMessageLinkRequest) *client.MessageLink); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.MessageLink)
		}
	}

	if rf, ok := ret.Get(1).(func(*client.GetMessageLinkRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TelegramRepo_GetMessageLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMessageLink'
type TelegramRepo_GetMessageLink_Call struct {
	*mock.Call
}

// GetMessageLink is a helper method to define mock.On call
//   - _a0 *client.GetMessageLinkRequest
func (_e *TelegramRepo_Expecter) GetMessageLink(_a0 interface{}) *TelegramRepo_GetMessageLink_Call {
	return &TelegramRepo_GetMessageLink_Call{Call: _e.mock.On("GetMessageLink", _a0)}
}

func (_c *TelegramRepo_GetMessageLink_Call) Run(run func(_a0 *client.GetMessageLinkRequest)) *TelegramRepo_GetMessageLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*client.GetMessageLinkRequest))
	})
	return _c
}

func (_c *TelegramRepo_GetMessageLink_Call) Return(_a0 *client.MessageLink, _a1 error) *TelegramRepo_GetMessageLink_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TelegramRepo_GetMessageLink_Call) RunAndReturn(run func(*client.GetMessageLinkRequest) (*client.MessageLink, error)) *TelegramRepo_GetMessageLink_Call {
	_c.Call.Return(run)
	return _c
}

// GetMessageLinkInfo provides a mock function with given fields: _a0
func (_m *TelegramRepo) GetMessageLinkInfo(_a0 *client.GetMessageLinkInfoRequest) (*client.MessageLinkInfo, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetMessageLinkInfo")
	}

	var r0 *client.MessageLinkInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(*client.GetMessageLinkInfoRequest) (*client.MessageLinkInfo, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*client.GetMessageLinkInfoRequest) *client.MessageLinkInfo); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.MessageLinkInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(*client.GetMessageLinkInfoRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TelegramRepo_GetMessageLinkInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMessageLinkInfo'
type TelegramRepo_GetMessageLinkInfo_Call struct {
	*mock.Call
}

// GetMessageLinkInfo is a helper method to define mock.On call
//   - _a0 *client.GetMessageLinkInfoRequest
func (_e *TelegramRepo_Expecter) GetMessageLinkInfo(_a0 interface{}) *TelegramRepo_GetMessageLinkInfo_Call {
	return &TelegramRepo_GetMessageLinkInfo_Call{Call: _e.mock.On("GetMessageLinkInfo", _a0)}
}

func (_c *TelegramRepo_GetMessageLinkInfo_Call) Run(run func(_a0 *client.GetMessageLinkInfoRequest)) *TelegramRepo_GetMessageLinkInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*client.GetMessageLinkInfoRequest))
	})
	return _c
}

func (_c *TelegramRepo_GetMessageLinkInfo_Call) Return(_a0 *client.MessageLinkInfo, _a1 error) *TelegramRepo_GetMessageLinkInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TelegramRepo_GetMessageLinkInfo_Call) RunAndReturn(run func(*client.GetMessageLinkInfoRequest) (*client.MessageLinkInfo, error)) *TelegramRepo_GetMessageLinkInfo_Call {
	_c.Call.Return(run)
	return _c
}

// ParseTextEntities provides a mock function with given fields: _a0
func (_m *TelegramRepo) ParseTextEntities(_a0 *client.ParseTextEntitiesRequest) (*client.FormattedText, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ParseTextEntities")
	}

	var r0 *client.FormattedText
	var r1 error
	if rf, ok := ret.Get(0).(func(*client.ParseTextEntitiesRequest) (*client.FormattedText, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*client.ParseTextEntitiesRequest) *client.FormattedText); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.FormattedText)
		}
	}

	if rf, ok := ret.Get(1).(func(*client.ParseTextEntitiesRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TelegramRepo_ParseTextEntities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseTextEntities'
type TelegramRepo_ParseTextEntities_Call struct {
	*mock.Call
}

// ParseTextEntities is a helper method to define mock.On call
//   - _a0 *client.ParseTextEntitiesRequest
func (_e *TelegramRepo_Expecter) ParseTextEntities(_a0 interface{}) *TelegramRepo_ParseTextEntities_Call {
	return &TelegramRepo_ParseTextEntities_Call{Call: _e.mock.On("ParseTextEntities", _a0)}
}

func (_c *TelegramRepo_ParseTextEntities_Call) Run(run func(_a0 *client.ParseTextEntitiesRequest)) *TelegramRepo_ParseTextEntities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*client.ParseTextEntitiesRequest))
	})
	return _c
}

func (_c *TelegramRepo_ParseTextEntities_Call) Return(_a0 *client.FormattedText, _a1 error) *TelegramRepo_ParseTextEntities_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TelegramRepo_ParseTextEntities_Call) RunAndReturn(run func(*client.ParseTextEntitiesRequest) (*client.FormattedText, error)) *TelegramRepo_ParseTextEntities_Call {
	_c.Call.Return(run)
	return _c
}

// NewTelegramRepo creates a new instance of TelegramRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTelegramRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *TelegramRepo {
	mock := &TelegramRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
