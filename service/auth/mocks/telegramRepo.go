// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	client "github.com/zelenin/go-tdlib/client"
)

// TelegramRepo is an autogenerated mock type for the telegramRepo type
type TelegramRepo struct {
	mock.Mock
}

type TelegramRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *TelegramRepo) EXPECT() *TelegramRepo_Expecter {
	return &TelegramRepo_Expecter{mock: &_m.Mock}
}

// CreateClient provides a mock function with given fields: _a0, _a1
func (_m *TelegramRepo) CreateClient(_a0 func() client.AuthorizationStateHandler, _a1 func()) {
	_m.Called(_a0, _a1)
}

// TelegramRepo_CreateClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateClient'
type TelegramRepo_CreateClient_Call struct {
	*mock.Call
}

// CreateClient is a helper method to define mock.On call
//   - _a0 func() client.AuthorizationStateHandler
//   - _a1 func()
func (_e *TelegramRepo_Expecter) CreateClient(_a0 interface{}, _a1 interface{}) *TelegramRepo_CreateClient_Call {
	return &TelegramRepo_CreateClient_Call{Call: _e.mock.On("CreateClient", _a0, _a1)}
}

func (_c *TelegramRepo_CreateClient_Call) Run(run func(_a0 func() client.AuthorizationStateHandler, _a1 func())) *TelegramRepo_CreateClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func() client.AuthorizationStateHandler), args[1].(func()))
	})
	return _c
}

func (_c *TelegramRepo_CreateClient_Call) Return() *TelegramRepo_CreateClient_Call {
	_c.Call.Return()
	return _c
}

func (_c *TelegramRepo_CreateClient_Call) RunAndReturn(run func(func() client.AuthorizationStateHandler, func())) *TelegramRepo_CreateClient_Call {
	_c.Run(run)
	return _c
}

// CreateTdlibParameters provides a mock function with no fields
func (_m *TelegramRepo) CreateTdlibParameters() *client.SetTdlibParametersRequest {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CreateTdlibParameters")
	}

	var r0 *client.SetTdlibParametersRequest
	if rf, ok := ret.Get(0).(func() *client.SetTdlibParametersRequest); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.SetTdlibParametersRequest)
		}
	}

	return r0
}

// TelegramRepo_CreateTdlibParameters_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTdlibParameters'
type TelegramRepo_CreateTdlibParameters_Call struct {
	*mock.Call
}

// CreateTdlibParameters is a helper method to define mock.On call
func (_e *TelegramRepo_Expecter) CreateTdlibParameters() *TelegramRepo_CreateTdlibParameters_Call {
	return &TelegramRepo_CreateTdlibParameters_Call{Call: _e.mock.On("CreateTdlibParameters")}
}

func (_c *TelegramRepo_CreateTdlibParameters_Call) Run(run func()) *TelegramRepo_CreateTdlibParameters_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TelegramRepo_CreateTdlibParameters_Call) Return(_a0 *client.SetTdlibParametersRequest) *TelegramRepo_CreateTdlibParameters_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TelegramRepo_CreateTdlibParameters_Call) RunAndReturn(run func() *client.SetTdlibParametersRequest) *TelegramRepo_CreateTdlibParameters_Call {
	_c.Call.Return(run)
	return _c
}

// GetMe provides a mock function with no fields
func (_m *TelegramRepo) GetMe() (*client.User, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetMe")
	}

	var r0 *client.User
	var r1 error
	if rf, ok := ret.Get(0).(func() (*client.User, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *client.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.User)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TelegramRepo_GetMe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMe'
type TelegramRepo_GetMe_Call struct {
	*mock.Call
}

// GetMe is a helper method to define mock.On call
func (_e *TelegramRepo_Expecter) GetMe() *TelegramRepo_GetMe_Call {
	return &TelegramRepo_GetMe_Call{Call: _e.mock.On("GetMe")}
}

func (_c *TelegramRepo_GetMe_Call) Run(run func()) *TelegramRepo_GetMe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TelegramRepo_GetMe_Call) Return(_a0 *client.User, _a1 error) *TelegramRepo_GetMe_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TelegramRepo_GetMe_Call) RunAndReturn(run func() (*client.User, error)) *TelegramRepo_GetMe_Call {
	_c.Call.Return(run)
	return _c
}

// GetOption provides a mock function with given fields: _a0
func (_m *TelegramRepo) GetOption(_a0 *client.GetOptionRequest) (client.OptionValue, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetOption")
	}

	var r0 client.OptionValue
	var r1 error
	if rf, ok := ret.Get(0).(func(*client.GetOptionRequest) (client.OptionValue, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*client.GetOptionRequest) client.OptionValue); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(client.OptionValue)
		}
	}

	if rf, ok := ret.Get(1).(func(*client.GetOptionRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TelegramRepo_GetOption_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOption'
type TelegramRepo_GetOption_Call struct {
	*mock.Call
}

// GetOption is a helper method to define mock.On call
//   - _a0 *client.GetOptionRequest
func (_e *TelegramRepo_Expecter) GetOption(_a0 interface{}) *TelegramRepo_GetOption_Call {
	return &TelegramRepo_GetOption_Call{Call: _e.mock.On("GetOption", _a0)}
}

func (_c *TelegramRepo_GetOption_Call) Run(run func(_a0 *client.GetOptionRequest)) *TelegramRepo_GetOption_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*client.GetOptionRequest))
	})
	return _c
}

func (_c *TelegramRepo_GetOption_Call) Return(_a0 client.OptionValue, _a1 error) *TelegramRepo_GetOption_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TelegramRepo_GetOption_Call) RunAndReturn(run func(*client.GetOptionRequest) (client.OptionValue, error)) *TelegramRepo_GetOption_Call {
	_c.Call.Return(run)
	return _c
}

// NewTelegramRepo creates a new instance of TelegramRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTelegramRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *TelegramRepo {
	mock := &TelegramRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
