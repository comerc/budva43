// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	client "github.com/zelenin/go-tdlib/client"

	mock "github.com/stretchr/testify/mock"
)

// TelegramRepo is an autogenerated mock type for the telegramRepo type
type TelegramRepo struct {
	mock.Mock
}

type TelegramRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *TelegramRepo) EXPECT() *TelegramRepo_Expecter {
	return &TelegramRepo_Expecter{mock: &_m.Mock}
}

// DeleteMessages provides a mock function with given fields: _a0
func (_m *TelegramRepo) DeleteMessages(_a0 *client.DeleteMessagesRequest) (*client.Ok, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMessages")
	}

	var r0 *client.Ok
	var r1 error
	if rf, ok := ret.Get(0).(func(*client.DeleteMessagesRequest) (*client.Ok, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*client.DeleteMessagesRequest) *client.Ok); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Ok)
		}
	}

	if rf, ok := ret.Get(1).(func(*client.DeleteMessagesRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TelegramRepo_DeleteMessages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMessages'
type TelegramRepo_DeleteMessages_Call struct {
	*mock.Call
}

// DeleteMessages is a helper method to define mock.On call
//   - _a0 *client.DeleteMessagesRequest
func (_e *TelegramRepo_Expecter) DeleteMessages(_a0 interface{}) *TelegramRepo_DeleteMessages_Call {
	return &TelegramRepo_DeleteMessages_Call{Call: _e.mock.On("DeleteMessages", _a0)}
}

func (_c *TelegramRepo_DeleteMessages_Call) Run(run func(_a0 *client.DeleteMessagesRequest)) *TelegramRepo_DeleteMessages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*client.DeleteMessagesRequest))
	})
	return _c
}

func (_c *TelegramRepo_DeleteMessages_Call) Return(_a0 *client.Ok, _a1 error) *TelegramRepo_DeleteMessages_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TelegramRepo_DeleteMessages_Call) RunAndReturn(run func(*client.DeleteMessagesRequest) (*client.Ok, error)) *TelegramRepo_DeleteMessages_Call {
	_c.Call.Return(run)
	return _c
}

// EditMessageCaption provides a mock function with given fields: _a0
func (_m *TelegramRepo) EditMessageCaption(_a0 *client.EditMessageCaptionRequest) (*client.Message, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for EditMessageCaption")
	}

	var r0 *client.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(*client.EditMessageCaptionRequest) (*client.Message, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*client.EditMessageCaptionRequest) *client.Message); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(*client.EditMessageCaptionRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TelegramRepo_EditMessageCaption_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EditMessageCaption'
type TelegramRepo_EditMessageCaption_Call struct {
	*mock.Call
}

// EditMessageCaption is a helper method to define mock.On call
//   - _a0 *client.EditMessageCaptionRequest
func (_e *TelegramRepo_Expecter) EditMessageCaption(_a0 interface{}) *TelegramRepo_EditMessageCaption_Call {
	return &TelegramRepo_EditMessageCaption_Call{Call: _e.mock.On("EditMessageCaption", _a0)}
}

func (_c *TelegramRepo_EditMessageCaption_Call) Run(run func(_a0 *client.EditMessageCaptionRequest)) *TelegramRepo_EditMessageCaption_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*client.EditMessageCaptionRequest))
	})
	return _c
}

func (_c *TelegramRepo_EditMessageCaption_Call) Return(_a0 *client.Message, _a1 error) *TelegramRepo_EditMessageCaption_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TelegramRepo_EditMessageCaption_Call) RunAndReturn(run func(*client.EditMessageCaptionRequest) (*client.Message, error)) *TelegramRepo_EditMessageCaption_Call {
	_c.Call.Return(run)
	return _c
}

// EditMessageText provides a mock function with given fields: _a0
func (_m *TelegramRepo) EditMessageText(_a0 *client.EditMessageTextRequest) (*client.Message, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for EditMessageText")
	}

	var r0 *client.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(*client.EditMessageTextRequest) (*client.Message, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*client.EditMessageTextRequest) *client.Message); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(*client.EditMessageTextRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TelegramRepo_EditMessageText_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EditMessageText'
type TelegramRepo_EditMessageText_Call struct {
	*mock.Call
}

// EditMessageText is a helper method to define mock.On call
//   - _a0 *client.EditMessageTextRequest
func (_e *TelegramRepo_Expecter) EditMessageText(_a0 interface{}) *TelegramRepo_EditMessageText_Call {
	return &TelegramRepo_EditMessageText_Call{Call: _e.mock.On("EditMessageText", _a0)}
}

func (_c *TelegramRepo_EditMessageText_Call) Run(run func(_a0 *client.EditMessageTextRequest)) *TelegramRepo_EditMessageText_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*client.EditMessageTextRequest))
	})
	return _c
}

func (_c *TelegramRepo_EditMessageText_Call) Return(_a0 *client.Message, _a1 error) *TelegramRepo_EditMessageText_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TelegramRepo_EditMessageText_Call) RunAndReturn(run func(*client.EditMessageTextRequest) (*client.Message, error)) *TelegramRepo_EditMessageText_Call {
	_c.Call.Return(run)
	return _c
}

// ForwardMessages provides a mock function with given fields: _a0
func (_m *TelegramRepo) ForwardMessages(_a0 *client.ForwardMessagesRequest) (*client.Messages, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ForwardMessages")
	}

	var r0 *client.Messages
	var r1 error
	if rf, ok := ret.Get(0).(func(*client.ForwardMessagesRequest) (*client.Messages, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*client.ForwardMessagesRequest) *client.Messages); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Messages)
		}
	}

	if rf, ok := ret.Get(1).(func(*client.ForwardMessagesRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TelegramRepo_ForwardMessages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ForwardMessages'
type TelegramRepo_ForwardMessages_Call struct {
	*mock.Call
}

// ForwardMessages is a helper method to define mock.On call
//   - _a0 *client.ForwardMessagesRequest
func (_e *TelegramRepo_Expecter) ForwardMessages(_a0 interface{}) *TelegramRepo_ForwardMessages_Call {
	return &TelegramRepo_ForwardMessages_Call{Call: _e.mock.On("ForwardMessages", _a0)}
}

func (_c *TelegramRepo_ForwardMessages_Call) Run(run func(_a0 *client.ForwardMessagesRequest)) *TelegramRepo_ForwardMessages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*client.ForwardMessagesRequest))
	})
	return _c
}

func (_c *TelegramRepo_ForwardMessages_Call) Return(_a0 *client.Messages, _a1 error) *TelegramRepo_ForwardMessages_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TelegramRepo_ForwardMessages_Call) RunAndReturn(run func(*client.ForwardMessagesRequest) (*client.Messages, error)) *TelegramRepo_ForwardMessages_Call {
	_c.Call.Return(run)
	return _c
}

// GetChatHistory provides a mock function with given fields: _a0
func (_m *TelegramRepo) GetChatHistory(_a0 *client.GetChatHistoryRequest) (*client.Messages, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetChatHistory")
	}

	var r0 *client.Messages
	var r1 error
	if rf, ok := ret.Get(0).(func(*client.GetChatHistoryRequest) (*client.Messages, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*client.GetChatHistoryRequest) *client.Messages); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Messages)
		}
	}

	if rf, ok := ret.Get(1).(func(*client.GetChatHistoryRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TelegramRepo_GetChatHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetChatHistory'
type TelegramRepo_GetChatHistory_Call struct {
	*mock.Call
}

// GetChatHistory is a helper method to define mock.On call
//   - _a0 *client.GetChatHistoryRequest
func (_e *TelegramRepo_Expecter) GetChatHistory(_a0 interface{}) *TelegramRepo_GetChatHistory_Call {
	return &TelegramRepo_GetChatHistory_Call{Call: _e.mock.On("GetChatHistory", _a0)}
}

func (_c *TelegramRepo_GetChatHistory_Call) Run(run func(_a0 *client.GetChatHistoryRequest)) *TelegramRepo_GetChatHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*client.GetChatHistoryRequest))
	})
	return _c
}

func (_c *TelegramRepo_GetChatHistory_Call) Return(_a0 *client.Messages, _a1 error) *TelegramRepo_GetChatHistory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TelegramRepo_GetChatHistory_Call) RunAndReturn(run func(*client.GetChatHistoryRequest) (*client.Messages, error)) *TelegramRepo_GetChatHistory_Call {
	_c.Call.Return(run)
	return _c
}

// GetMarkdownText provides a mock function with given fields: _a0
func (_m *TelegramRepo) GetMarkdownText(_a0 *client.GetMarkdownTextRequest) (*client.FormattedText, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetMarkdownText")
	}

	var r0 *client.FormattedText
	var r1 error
	if rf, ok := ret.Get(0).(func(*client.GetMarkdownTextRequest) (*client.FormattedText, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*client.GetMarkdownTextRequest) *client.FormattedText); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.FormattedText)
		}
	}

	if rf, ok := ret.Get(1).(func(*client.GetMarkdownTextRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TelegramRepo_GetMarkdownText_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMarkdownText'
type TelegramRepo_GetMarkdownText_Call struct {
	*mock.Call
}

// GetMarkdownText is a helper method to define mock.On call
//   - _a0 *client.GetMarkdownTextRequest
func (_e *TelegramRepo_Expecter) GetMarkdownText(_a0 interface{}) *TelegramRepo_GetMarkdownText_Call {
	return &TelegramRepo_GetMarkdownText_Call{Call: _e.mock.On("GetMarkdownText", _a0)}
}

func (_c *TelegramRepo_GetMarkdownText_Call) Run(run func(_a0 *client.GetMarkdownTextRequest)) *TelegramRepo_GetMarkdownText_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*client.GetMarkdownTextRequest))
	})
	return _c
}

func (_c *TelegramRepo_GetMarkdownText_Call) Return(_a0 *client.FormattedText, _a1 error) *TelegramRepo_GetMarkdownText_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TelegramRepo_GetMarkdownText_Call) RunAndReturn(run func(*client.GetMarkdownTextRequest) (*client.FormattedText, error)) *TelegramRepo_GetMarkdownText_Call {
	_c.Call.Return(run)
	return _c
}

// GetMessage provides a mock function with given fields: _a0
func (_m *TelegramRepo) GetMessage(_a0 *client.GetMessageRequest) (*client.Message, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetMessage")
	}

	var r0 *client.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(*client.GetMessageRequest) (*client.Message, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*client.GetMessageRequest) *client.Message); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(*client.GetMessageRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TelegramRepo_GetMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMessage'
type TelegramRepo_GetMessage_Call struct {
	*mock.Call
}

// GetMessage is a helper method to define mock.On call
//   - _a0 *client.GetMessageRequest
func (_e *TelegramRepo_Expecter) GetMessage(_a0 interface{}) *TelegramRepo_GetMessage_Call {
	return &TelegramRepo_GetMessage_Call{Call: _e.mock.On("GetMessage", _a0)}
}

func (_c *TelegramRepo_GetMessage_Call) Run(run func(_a0 *client.GetMessageRequest)) *TelegramRepo_GetMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*client.GetMessageRequest))
	})
	return _c
}

func (_c *TelegramRepo_GetMessage_Call) Return(_a0 *client.Message, _a1 error) *TelegramRepo_GetMessage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TelegramRepo_GetMessage_Call) RunAndReturn(run func(*client.GetMessageRequest) (*client.Message, error)) *TelegramRepo_GetMessage_Call {
	_c.Call.Return(run)
	return _c
}

// GetMessages provides a mock function with given fields: _a0
func (_m *TelegramRepo) GetMessages(_a0 *client.GetMessagesRequest) (*client.Messages, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetMessages")
	}

	var r0 *client.Messages
	var r1 error
	if rf, ok := ret.Get(0).(func(*client.GetMessagesRequest) (*client.Messages, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*client.GetMessagesRequest) *client.Messages); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Messages)
		}
	}

	if rf, ok := ret.Get(1).(func(*client.GetMessagesRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TelegramRepo_GetMessages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMessages'
type TelegramRepo_GetMessages_Call struct {
	*mock.Call
}

// GetMessages is a helper method to define mock.On call
//   - _a0 *client.GetMessagesRequest
func (_e *TelegramRepo_Expecter) GetMessages(_a0 interface{}) *TelegramRepo_GetMessages_Call {
	return &TelegramRepo_GetMessages_Call{Call: _e.mock.On("GetMessages", _a0)}
}

func (_c *TelegramRepo_GetMessages_Call) Run(run func(_a0 *client.GetMessagesRequest)) *TelegramRepo_GetMessages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*client.GetMessagesRequest))
	})
	return _c
}

func (_c *TelegramRepo_GetMessages_Call) Return(_a0 *client.Messages, _a1 error) *TelegramRepo_GetMessages_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TelegramRepo_GetMessages_Call) RunAndReturn(run func(*client.GetMessagesRequest) (*client.Messages, error)) *TelegramRepo_GetMessages_Call {
	_c.Call.Return(run)
	return _c
}

// ParseTextEntities provides a mock function with given fields: _a0
func (_m *TelegramRepo) ParseTextEntities(_a0 *client.ParseTextEntitiesRequest) (*client.FormattedText, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ParseTextEntities")
	}

	var r0 *client.FormattedText
	var r1 error
	if rf, ok := ret.Get(0).(func(*client.ParseTextEntitiesRequest) (*client.FormattedText, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*client.ParseTextEntitiesRequest) *client.FormattedText); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.FormattedText)
		}
	}

	if rf, ok := ret.Get(1).(func(*client.ParseTextEntitiesRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TelegramRepo_ParseTextEntities_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ParseTextEntities'
type TelegramRepo_ParseTextEntities_Call struct {
	*mock.Call
}

// ParseTextEntities is a helper method to define mock.On call
//   - _a0 *client.ParseTextEntitiesRequest
func (_e *TelegramRepo_Expecter) ParseTextEntities(_a0 interface{}) *TelegramRepo_ParseTextEntities_Call {
	return &TelegramRepo_ParseTextEntities_Call{Call: _e.mock.On("ParseTextEntities", _a0)}
}

func (_c *TelegramRepo_ParseTextEntities_Call) Run(run func(_a0 *client.ParseTextEntitiesRequest)) *TelegramRepo_ParseTextEntities_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*client.ParseTextEntitiesRequest))
	})
	return _c
}

func (_c *TelegramRepo_ParseTextEntities_Call) Return(_a0 *client.FormattedText, _a1 error) *TelegramRepo_ParseTextEntities_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TelegramRepo_ParseTextEntities_Call) RunAndReturn(run func(*client.ParseTextEntitiesRequest) (*client.FormattedText, error)) *TelegramRepo_ParseTextEntities_Call {
	_c.Call.Return(run)
	return _c
}

// SendMessage provides a mock function with given fields: _a0
func (_m *TelegramRepo) SendMessage(_a0 *client.SendMessageRequest) (*client.Message, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SendMessage")
	}

	var r0 *client.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(*client.SendMessageRequest) (*client.Message, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*client.SendMessageRequest) *client.Message); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(*client.SendMessageRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TelegramRepo_SendMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMessage'
type TelegramRepo_SendMessage_Call struct {
	*mock.Call
}

// SendMessage is a helper method to define mock.On call
//   - _a0 *client.SendMessageRequest
func (_e *TelegramRepo_Expecter) SendMessage(_a0 interface{}) *TelegramRepo_SendMessage_Call {
	return &TelegramRepo_SendMessage_Call{Call: _e.mock.On("SendMessage", _a0)}
}

func (_c *TelegramRepo_SendMessage_Call) Run(run func(_a0 *client.SendMessageRequest)) *TelegramRepo_SendMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*client.SendMessageRequest))
	})
	return _c
}

func (_c *TelegramRepo_SendMessage_Call) Return(_a0 *client.Message, _a1 error) *TelegramRepo_SendMessage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TelegramRepo_SendMessage_Call) RunAndReturn(run func(*client.SendMessageRequest) (*client.Message, error)) *TelegramRepo_SendMessage_Call {
	_c.Call.Return(run)
	return _c
}

// SendMessageAlbum provides a mock function with given fields: _a0
func (_m *TelegramRepo) SendMessageAlbum(_a0 *client.SendMessageAlbumRequest) (*client.Messages, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SendMessageAlbum")
	}

	var r0 *client.Messages
	var r1 error
	if rf, ok := ret.Get(0).(func(*client.SendMessageAlbumRequest) (*client.Messages, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*client.SendMessageAlbumRequest) *client.Messages); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*client.Messages)
		}
	}

	if rf, ok := ret.Get(1).(func(*client.SendMessageAlbumRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TelegramRepo_SendMessageAlbum_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMessageAlbum'
type TelegramRepo_SendMessageAlbum_Call struct {
	*mock.Call
}

// SendMessageAlbum is a helper method to define mock.On call
//   - _a0 *client.SendMessageAlbumRequest
func (_e *TelegramRepo_Expecter) SendMessageAlbum(_a0 interface{}) *TelegramRepo_SendMessageAlbum_Call {
	return &TelegramRepo_SendMessageAlbum_Call{Call: _e.mock.On("SendMessageAlbum", _a0)}
}

func (_c *TelegramRepo_SendMessageAlbum_Call) Run(run func(_a0 *client.SendMessageAlbumRequest)) *TelegramRepo_SendMessageAlbum_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*client.SendMessageAlbumRequest))
	})
	return _c
}

func (_c *TelegramRepo_SendMessageAlbum_Call) Return(_a0 *client.Messages, _a1 error) *TelegramRepo_SendMessageAlbum_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TelegramRepo_SendMessageAlbum_Call) RunAndReturn(run func(*client.SendMessageAlbumRequest) (*client.Messages, error)) *TelegramRepo_SendMessageAlbum_Call {
	_c.Call.Return(run)
	return _c
}

// NewTelegramRepo creates a new instance of TelegramRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTelegramRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *TelegramRepo {
	mock := &TelegramRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
