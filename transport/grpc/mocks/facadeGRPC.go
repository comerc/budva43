// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	dto "github.com/comerc/budva43/app/dto/grpc/dto"

	mock "github.com/stretchr/testify/mock"
)

// FacadeGRPC is an autogenerated mock type for the facadeGRPC type
type FacadeGRPC struct {
	mock.Mock
}

type FacadeGRPC_Expecter struct {
	mock *mock.Mock
}

func (_m *FacadeGRPC) EXPECT() *FacadeGRPC_Expecter {
	return &FacadeGRPC_Expecter{mock: &_m.Mock}
}

// DeleteMessages provides a mock function with given fields: chatId, messageIds
func (_m *FacadeGRPC) DeleteMessages(chatId int64, messageIds []int64) error {
	ret := _m.Called(chatId, messageIds)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMessages")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, []int64) error); ok {
		r0 = rf(chatId, messageIds)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FacadeGRPC_DeleteMessages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteMessages'
type FacadeGRPC_DeleteMessages_Call struct {
	*mock.Call
}

// DeleteMessages is a helper method to define mock.On call
//   - chatId int64
//   - messageIds []int64
func (_e *FacadeGRPC_Expecter) DeleteMessages(chatId interface{}, messageIds interface{}) *FacadeGRPC_DeleteMessages_Call {
	return &FacadeGRPC_DeleteMessages_Call{Call: _e.mock.On("DeleteMessages", chatId, messageIds)}
}

func (_c *FacadeGRPC_DeleteMessages_Call) Run(run func(chatId int64, messageIds []int64)) *FacadeGRPC_DeleteMessages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].([]int64))
	})
	return _c
}

func (_c *FacadeGRPC_DeleteMessages_Call) Return(_a0 error) *FacadeGRPC_DeleteMessages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FacadeGRPC_DeleteMessages_Call) RunAndReturn(run func(int64, []int64) error) *FacadeGRPC_DeleteMessages_Call {
	_c.Call.Return(run)
	return _c
}

// ForwardMessage provides a mock function with given fields: chatId, messageId
func (_m *FacadeGRPC) ForwardMessage(chatId int64, messageId int64) error {
	ret := _m.Called(chatId, messageId)

	if len(ret) == 0 {
		panic("no return value specified for ForwardMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int64) error); ok {
		r0 = rf(chatId, messageId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FacadeGRPC_ForwardMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ForwardMessage'
type FacadeGRPC_ForwardMessage_Call struct {
	*mock.Call
}

// ForwardMessage is a helper method to define mock.On call
//   - chatId int64
//   - messageId int64
func (_e *FacadeGRPC_Expecter) ForwardMessage(chatId interface{}, messageId interface{}) *FacadeGRPC_ForwardMessage_Call {
	return &FacadeGRPC_ForwardMessage_Call{Call: _e.mock.On("ForwardMessage", chatId, messageId)}
}

func (_c *FacadeGRPC_ForwardMessage_Call) Run(run func(chatId int64, messageId int64)) *FacadeGRPC_ForwardMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int64))
	})
	return _c
}

func (_c *FacadeGRPC_ForwardMessage_Call) Return(_a0 error) *FacadeGRPC_ForwardMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FacadeGRPC_ForwardMessage_Call) RunAndReturn(run func(int64, int64) error) *FacadeGRPC_ForwardMessage_Call {
	_c.Call.Return(run)
	return _c
}

// GetLastMessage provides a mock function with given fields: chatId
func (_m *FacadeGRPC) GetLastMessage(chatId int64) (*dto.Message, error) {
	ret := _m.Called(chatId)

	if len(ret) == 0 {
		panic("no return value specified for GetLastMessage")
	}

	var r0 *dto.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*dto.Message, error)); ok {
		return rf(chatId)
	}
	if rf, ok := ret.Get(0).(func(int64) *dto.Message); ok {
		r0 = rf(chatId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(chatId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FacadeGRPC_GetLastMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastMessage'
type FacadeGRPC_GetLastMessage_Call struct {
	*mock.Call
}

// GetLastMessage is a helper method to define mock.On call
//   - chatId int64
func (_e *FacadeGRPC_Expecter) GetLastMessage(chatId interface{}) *FacadeGRPC_GetLastMessage_Call {
	return &FacadeGRPC_GetLastMessage_Call{Call: _e.mock.On("GetLastMessage", chatId)}
}

func (_c *FacadeGRPC_GetLastMessage_Call) Run(run func(chatId int64)) *FacadeGRPC_GetLastMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *FacadeGRPC_GetLastMessage_Call) Return(_a0 *dto.Message, _a1 error) *FacadeGRPC_GetLastMessage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FacadeGRPC_GetLastMessage_Call) RunAndReturn(run func(int64) (*dto.Message, error)) *FacadeGRPC_GetLastMessage_Call {
	_c.Call.Return(run)
	return _c
}

// GetMessage provides a mock function with given fields: chatId, messageId
func (_m *FacadeGRPC) GetMessage(chatId int64, messageId int64) (*dto.Message, error) {
	ret := _m.Called(chatId, messageId)

	if len(ret) == 0 {
		panic("no return value specified for GetMessage")
	}

	var r0 *dto.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int64) (*dto.Message, error)); ok {
		return rf(chatId, messageId)
	}
	if rf, ok := ret.Get(0).(func(int64, int64) *dto.Message); ok {
		r0 = rf(chatId, messageId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(chatId, messageId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FacadeGRPC_GetMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMessage'
type FacadeGRPC_GetMessage_Call struct {
	*mock.Call
}

// GetMessage is a helper method to define mock.On call
//   - chatId int64
//   - messageId int64
func (_e *FacadeGRPC_Expecter) GetMessage(chatId interface{}, messageId interface{}) *FacadeGRPC_GetMessage_Call {
	return &FacadeGRPC_GetMessage_Call{Call: _e.mock.On("GetMessage", chatId, messageId)}
}

func (_c *FacadeGRPC_GetMessage_Call) Run(run func(chatId int64, messageId int64)) *FacadeGRPC_GetMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int64))
	})
	return _c
}

func (_c *FacadeGRPC_GetMessage_Call) Return(_a0 *dto.Message, _a1 error) *FacadeGRPC_GetMessage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FacadeGRPC_GetMessage_Call) RunAndReturn(run func(int64, int64) (*dto.Message, error)) *FacadeGRPC_GetMessage_Call {
	_c.Call.Return(run)
	return _c
}

// GetMessageLink provides a mock function with given fields: chatId, messageId
func (_m *FacadeGRPC) GetMessageLink(chatId int64, messageId int64) (string, error) {
	ret := _m.Called(chatId, messageId)

	if len(ret) == 0 {
		panic("no return value specified for GetMessageLink")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, int64) (string, error)); ok {
		return rf(chatId, messageId)
	}
	if rf, ok := ret.Get(0).(func(int64, int64) string); ok {
		r0 = rf(chatId, messageId)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(int64, int64) error); ok {
		r1 = rf(chatId, messageId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FacadeGRPC_GetMessageLink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMessageLink'
type FacadeGRPC_GetMessageLink_Call struct {
	*mock.Call
}

// GetMessageLink is a helper method to define mock.On call
//   - chatId int64
//   - messageId int64
func (_e *FacadeGRPC_Expecter) GetMessageLink(chatId interface{}, messageId interface{}) *FacadeGRPC_GetMessageLink_Call {
	return &FacadeGRPC_GetMessageLink_Call{Call: _e.mock.On("GetMessageLink", chatId, messageId)}
}

func (_c *FacadeGRPC_GetMessageLink_Call) Run(run func(chatId int64, messageId int64)) *FacadeGRPC_GetMessageLink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int64))
	})
	return _c
}

func (_c *FacadeGRPC_GetMessageLink_Call) Return(_a0 string, _a1 error) *FacadeGRPC_GetMessageLink_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FacadeGRPC_GetMessageLink_Call) RunAndReturn(run func(int64, int64) (string, error)) *FacadeGRPC_GetMessageLink_Call {
	_c.Call.Return(run)
	return _c
}

// GetMessageLinkInfo provides a mock function with given fields: link
func (_m *FacadeGRPC) GetMessageLinkInfo(link string) (*dto.Message, error) {
	ret := _m.Called(link)

	if len(ret) == 0 {
		panic("no return value specified for GetMessageLinkInfo")
	}

	var r0 *dto.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*dto.Message, error)); ok {
		return rf(link)
	}
	if rf, ok := ret.Get(0).(func(string) *dto.Message); ok {
		r0 = rf(link)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(link)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FacadeGRPC_GetMessageLinkInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMessageLinkInfo'
type FacadeGRPC_GetMessageLinkInfo_Call struct {
	*mock.Call
}

// GetMessageLinkInfo is a helper method to define mock.On call
//   - link string
func (_e *FacadeGRPC_Expecter) GetMessageLinkInfo(link interface{}) *FacadeGRPC_GetMessageLinkInfo_Call {
	return &FacadeGRPC_GetMessageLinkInfo_Call{Call: _e.mock.On("GetMessageLinkInfo", link)}
}

func (_c *FacadeGRPC_GetMessageLinkInfo_Call) Run(run func(link string)) *FacadeGRPC_GetMessageLinkInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *FacadeGRPC_GetMessageLinkInfo_Call) Return(_a0 *dto.Message, _a1 error) *FacadeGRPC_GetMessageLinkInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FacadeGRPC_GetMessageLinkInfo_Call) RunAndReturn(run func(string) (*dto.Message, error)) *FacadeGRPC_GetMessageLinkInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetMessages provides a mock function with given fields: chatId, messageIds
func (_m *FacadeGRPC) GetMessages(chatId int64, messageIds []int64) ([]*dto.Message, error) {
	ret := _m.Called(chatId, messageIds)

	if len(ret) == 0 {
		panic("no return value specified for GetMessages")
	}

	var r0 []*dto.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, []int64) ([]*dto.Message, error)); ok {
		return rf(chatId, messageIds)
	}
	if rf, ok := ret.Get(0).(func(int64, []int64) []*dto.Message); ok {
		r0 = rf(chatId, messageIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(int64, []int64) error); ok {
		r1 = rf(chatId, messageIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FacadeGRPC_GetMessages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMessages'
type FacadeGRPC_GetMessages_Call struct {
	*mock.Call
}

// GetMessages is a helper method to define mock.On call
//   - chatId int64
//   - messageIds []int64
func (_e *FacadeGRPC_Expecter) GetMessages(chatId interface{}, messageIds interface{}) *FacadeGRPC_GetMessages_Call {
	return &FacadeGRPC_GetMessages_Call{Call: _e.mock.On("GetMessages", chatId, messageIds)}
}

func (_c *FacadeGRPC_GetMessages_Call) Run(run func(chatId int64, messageIds []int64)) *FacadeGRPC_GetMessages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].([]int64))
	})
	return _c
}

func (_c *FacadeGRPC_GetMessages_Call) Return(_a0 []*dto.Message, _a1 error) *FacadeGRPC_GetMessages_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FacadeGRPC_GetMessages_Call) RunAndReturn(run func(int64, []int64) ([]*dto.Message, error)) *FacadeGRPC_GetMessages_Call {
	_c.Call.Return(run)
	return _c
}

// SendMessage provides a mock function with given fields: message
func (_m *FacadeGRPC) SendMessage(message *dto.NewMessage) error {
	ret := _m.Called(message)

	if len(ret) == 0 {
		panic("no return value specified for SendMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*dto.NewMessage) error); ok {
		r0 = rf(message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FacadeGRPC_SendMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMessage'
type FacadeGRPC_SendMessage_Call struct {
	*mock.Call
}

// SendMessage is a helper method to define mock.On call
//   - message *dto.NewMessage
func (_e *FacadeGRPC_Expecter) SendMessage(message interface{}) *FacadeGRPC_SendMessage_Call {
	return &FacadeGRPC_SendMessage_Call{Call: _e.mock.On("SendMessage", message)}
}

func (_c *FacadeGRPC_SendMessage_Call) Run(run func(message *dto.NewMessage)) *FacadeGRPC_SendMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dto.NewMessage))
	})
	return _c
}

func (_c *FacadeGRPC_SendMessage_Call) Return(_a0 error) *FacadeGRPC_SendMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FacadeGRPC_SendMessage_Call) RunAndReturn(run func(*dto.NewMessage) error) *FacadeGRPC_SendMessage_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateMessage provides a mock function with given fields: message
func (_m *FacadeGRPC) UpdateMessage(message *dto.Message) error {
	ret := _m.Called(message)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*dto.Message) error); ok {
		r0 = rf(message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FacadeGRPC_UpdateMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateMessage'
type FacadeGRPC_UpdateMessage_Call struct {
	*mock.Call
}

// UpdateMessage is a helper method to define mock.On call
//   - message *dto.Message
func (_e *FacadeGRPC_Expecter) UpdateMessage(message interface{}) *FacadeGRPC_UpdateMessage_Call {
	return &FacadeGRPC_UpdateMessage_Call{Call: _e.mock.On("UpdateMessage", message)}
}

func (_c *FacadeGRPC_UpdateMessage_Call) Run(run func(message *dto.Message)) *FacadeGRPC_UpdateMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*dto.Message))
	})
	return _c
}

func (_c *FacadeGRPC_UpdateMessage_Call) Return(_a0 error) *FacadeGRPC_UpdateMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FacadeGRPC_UpdateMessage_Call) RunAndReturn(run func(*dto.Message) error) *FacadeGRPC_UpdateMessage_Call {
	_c.Call.Return(run)
	return _c
}

// NewFacadeGRPC creates a new instance of FacadeGRPC. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFacadeGRPC(t interface {
	mock.TestingT
	Cleanup(func())
}) *FacadeGRPC {
	mock := &FacadeGRPC{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
