// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: transport/grpc/pb/telegram.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FacadeGRPC_GetMessages_FullMethodName    = "/pb.FacadeGRPC/GetMessages"
	FacadeGRPC_GetLastMessage_FullMethodName = "/pb.FacadeGRPC/GetLastMessage"
	FacadeGRPC_SendMessage_FullMethodName    = "/pb.FacadeGRPC/SendMessage"
	FacadeGRPC_ForwardMessage_FullMethodName = "/pb.FacadeGRPC/ForwardMessage"
	FacadeGRPC_GetMessage_FullMethodName     = "/pb.FacadeGRPC/GetMessage"
	FacadeGRPC_UpdateMessage_FullMethodName  = "/pb.FacadeGRPC/UpdateMessage"
	FacadeGRPC_DeleteMessages_FullMethodName = "/pb.FacadeGRPC/DeleteMessages"
)

// FacadeGRPCClient is the client API for FacadeGRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FacadeGRPCClient interface {
	GetMessages(ctx context.Context, in *GetMessagesRequest, opts ...grpc.CallOption) (*GetMessagesResponse, error)
	GetLastMessage(ctx context.Context, in *GetLastMessageRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	ForwardMessage(ctx context.Context, in *ForwardMessageRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	GetMessage(ctx context.Context, in *GetMessageRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	UpdateMessage(ctx context.Context, in *UpdateMessageRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	DeleteMessages(ctx context.Context, in *DeleteMessagesRequest, opts ...grpc.CallOption) (*DeleteMessagesResponse, error)
}

type facadeGRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewFacadeGRPCClient(cc grpc.ClientConnInterface) FacadeGRPCClient {
	return &facadeGRPCClient{cc}
}

func (c *facadeGRPCClient) GetMessages(ctx context.Context, in *GetMessagesRequest, opts ...grpc.CallOption) (*GetMessagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMessagesResponse)
	err := c.cc.Invoke(ctx, FacadeGRPC_GetMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *facadeGRPCClient) GetLastMessage(ctx context.Context, in *GetLastMessageRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, FacadeGRPC_GetLastMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *facadeGRPCClient) SendMessage(ctx context.Context, in *SendMessageRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, FacadeGRPC_SendMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *facadeGRPCClient) ForwardMessage(ctx context.Context, in *ForwardMessageRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, FacadeGRPC_ForwardMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *facadeGRPCClient) GetMessage(ctx context.Context, in *GetMessageRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, FacadeGRPC_GetMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *facadeGRPCClient) UpdateMessage(ctx context.Context, in *UpdateMessageRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, FacadeGRPC_UpdateMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *facadeGRPCClient) DeleteMessages(ctx context.Context, in *DeleteMessagesRequest, opts ...grpc.CallOption) (*DeleteMessagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMessagesResponse)
	err := c.cc.Invoke(ctx, FacadeGRPC_DeleteMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FacadeGRPCServer is the server API for FacadeGRPC service.
// All implementations must embed UnimplementedFacadeGRPCServer
// for forward compatibility.
type FacadeGRPCServer interface {
	GetMessages(context.Context, *GetMessagesRequest) (*GetMessagesResponse, error)
	GetLastMessage(context.Context, *GetLastMessageRequest) (*MessageResponse, error)
	SendMessage(context.Context, *SendMessageRequest) (*MessageResponse, error)
	ForwardMessage(context.Context, *ForwardMessageRequest) (*MessageResponse, error)
	GetMessage(context.Context, *GetMessageRequest) (*MessageResponse, error)
	UpdateMessage(context.Context, *UpdateMessageRequest) (*MessageResponse, error)
	DeleteMessages(context.Context, *DeleteMessagesRequest) (*DeleteMessagesResponse, error)
	mustEmbedUnimplementedFacadeGRPCServer()
}

// UnimplementedFacadeGRPCServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFacadeGRPCServer struct{}

func (UnimplementedFacadeGRPCServer) GetMessages(context.Context, *GetMessagesRequest) (*GetMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessages not implemented")
}
func (UnimplementedFacadeGRPCServer) GetLastMessage(context.Context, *GetLastMessageRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastMessage not implemented")
}
func (UnimplementedFacadeGRPCServer) SendMessage(context.Context, *SendMessageRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedFacadeGRPCServer) ForwardMessage(context.Context, *ForwardMessageRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForwardMessage not implemented")
}
func (UnimplementedFacadeGRPCServer) GetMessage(context.Context, *GetMessageRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessage not implemented")
}
func (UnimplementedFacadeGRPCServer) UpdateMessage(context.Context, *UpdateMessageRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMessage not implemented")
}
func (UnimplementedFacadeGRPCServer) DeleteMessages(context.Context, *DeleteMessagesRequest) (*DeleteMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMessages not implemented")
}
func (UnimplementedFacadeGRPCServer) mustEmbedUnimplementedFacadeGRPCServer() {}
func (UnimplementedFacadeGRPCServer) testEmbeddedByValue()                    {}

// UnsafeFacadeGRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FacadeGRPCServer will
// result in compilation errors.
type UnsafeFacadeGRPCServer interface {
	mustEmbedUnimplementedFacadeGRPCServer()
}

func RegisterFacadeGRPCServer(s grpc.ServiceRegistrar, srv FacadeGRPCServer) {
	// If the following call pancis, it indicates UnimplementedFacadeGRPCServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FacadeGRPC_ServiceDesc, srv)
}

func _FacadeGRPC_GetMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FacadeGRPCServer).GetMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FacadeGRPC_GetMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FacadeGRPCServer).GetMessages(ctx, req.(*GetMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FacadeGRPC_GetLastMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLastMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FacadeGRPCServer).GetLastMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FacadeGRPC_GetLastMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FacadeGRPCServer).GetLastMessage(ctx, req.(*GetLastMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FacadeGRPC_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FacadeGRPCServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FacadeGRPC_SendMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FacadeGRPCServer).SendMessage(ctx, req.(*SendMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FacadeGRPC_ForwardMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForwardMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FacadeGRPCServer).ForwardMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FacadeGRPC_ForwardMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FacadeGRPCServer).ForwardMessage(ctx, req.(*ForwardMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FacadeGRPC_GetMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FacadeGRPCServer).GetMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FacadeGRPC_GetMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FacadeGRPCServer).GetMessage(ctx, req.(*GetMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FacadeGRPC_UpdateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FacadeGRPCServer).UpdateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FacadeGRPC_UpdateMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FacadeGRPCServer).UpdateMessage(ctx, req.(*UpdateMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FacadeGRPC_DeleteMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FacadeGRPCServer).DeleteMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FacadeGRPC_DeleteMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FacadeGRPCServer).DeleteMessages(ctx, req.(*DeleteMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FacadeGRPC_ServiceDesc is the grpc.ServiceDesc for FacadeGRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FacadeGRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.FacadeGRPC",
	HandlerType: (*FacadeGRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMessages",
			Handler:    _FacadeGRPC_GetMessages_Handler,
		},
		{
			MethodName: "GetLastMessage",
			Handler:    _FacadeGRPC_GetLastMessage_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _FacadeGRPC_SendMessage_Handler,
		},
		{
			MethodName: "ForwardMessage",
			Handler:    _FacadeGRPC_ForwardMessage_Handler,
		},
		{
			MethodName: "GetMessage",
			Handler:    _FacadeGRPC_GetMessage_Handler,
		},
		{
			MethodName: "UpdateMessage",
			Handler:    _FacadeGRPC_UpdateMessage_Handler,
		},
		{
			MethodName: "DeleteMessages",
			Handler:    _FacadeGRPC_DeleteMessages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transport/grpc/pb/telegram.proto",
}
