// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	client "github.com/zelenin/go-tdlib/client"
)

// AuthService is an autogenerated mock type for the authService type
type AuthService struct {
	mock.Mock
}

type AuthService_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthService) EXPECT() *AuthService_Expecter {
	return &AuthService_Expecter{mock: &_m.Mock}
}

// GetInputChan provides a mock function with no fields
func (_m *AuthService) GetInputChan() chan<- string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetInputChan")
	}

	var r0 chan<- string
	if rf, ok := ret.Get(0).(func() chan<- string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan<- string)
		}
	}

	return r0
}

// AuthService_GetInputChan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInputChan'
type AuthService_GetInputChan_Call struct {
	*mock.Call
}

// GetInputChan is a helper method to define mock.On call
func (_e *AuthService_Expecter) GetInputChan() *AuthService_GetInputChan_Call {
	return &AuthService_GetInputChan_Call{Call: _e.mock.On("GetInputChan")}
}

func (_c *AuthService_GetInputChan_Call) Run(run func()) *AuthService_GetInputChan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AuthService_GetInputChan_Call) Return(_a0 chan<- string) *AuthService_GetInputChan_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthService_GetInputChan_Call) RunAndReturn(run func() chan<- string) *AuthService_GetInputChan_Call {
	_c.Call.Return(run)
	return _c
}

// Subscribe provides a mock function with given fields: _a0
func (_m *AuthService) Subscribe(_a0 func(client.AuthorizationState)) {
	_m.Called(_a0)
}

// AuthService_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type AuthService_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - _a0 func(client.AuthorizationState)
func (_e *AuthService_Expecter) Subscribe(_a0 interface{}) *AuthService_Subscribe_Call {
	return &AuthService_Subscribe_Call{Call: _e.mock.On("Subscribe", _a0)}
}

func (_c *AuthService_Subscribe_Call) Run(run func(_a0 func(client.AuthorizationState))) *AuthService_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(client.AuthorizationState)))
	})
	return _c
}

func (_c *AuthService_Subscribe_Call) Return() *AuthService_Subscribe_Call {
	_c.Call.Return()
	return _c
}

func (_c *AuthService_Subscribe_Call) RunAndReturn(run func(func(client.AuthorizationState))) *AuthService_Subscribe_Call {
	_c.Run(run)
	return _c
}

// NewAuthService creates a new instance of AuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthService(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthService {
	mock := &AuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
