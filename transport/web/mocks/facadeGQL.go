// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	dto "github.com/comerc/budva43/app/dto/gql/dto"
	mock "github.com/stretchr/testify/mock"
)

// FacadeGQL is an autogenerated mock type for the facadeGQL type
type FacadeGQL struct {
	mock.Mock
}

type FacadeGQL_Expecter struct {
	mock *mock.Mock
}

func (_m *FacadeGQL) EXPECT() *FacadeGQL_Expecter {
	return &FacadeGQL_Expecter{mock: &_m.Mock}
}

// GetStatus provides a mock function with no fields
func (_m *FacadeGQL) GetStatus() (*dto.Status, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetStatus")
	}

	var r0 *dto.Status
	var r1 error
	if rf, ok := ret.Get(0).(func() (*dto.Status, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *dto.Status); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.Status)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FacadeGQL_GetStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStatus'
type FacadeGQL_GetStatus_Call struct {
	*mock.Call
}

// GetStatus is a helper method to define mock.On call
func (_e *FacadeGQL_Expecter) GetStatus() *FacadeGQL_GetStatus_Call {
	return &FacadeGQL_GetStatus_Call{Call: _e.mock.On("GetStatus")}
}

func (_c *FacadeGQL_GetStatus_Call) Run(run func()) *FacadeGQL_GetStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *FacadeGQL_GetStatus_Call) Return(_a0 *dto.Status, _a1 error) *FacadeGQL_GetStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FacadeGQL_GetStatus_Call) RunAndReturn(run func() (*dto.Status, error)) *FacadeGQL_GetStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewFacadeGQL creates a new instance of FacadeGQL. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFacadeGQL(t interface {
	mock.TestingT
	Cleanup(func())
}) *FacadeGQL {
	mock := &FacadeGQL{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
