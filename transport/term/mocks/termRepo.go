// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// TermRepo is an autogenerated mock type for the termRepo type
type TermRepo struct {
	mock.Mock
}

type TermRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *TermRepo) EXPECT() *TermRepo_Expecter {
	return &TermRepo_Expecter{mock: &_m.Mock}
}

// HiddenReadLine provides a mock function with no fields
func (_m *TermRepo) HiddenReadLine() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HiddenReadLine")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TermRepo_HiddenReadLine_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HiddenReadLine'
type TermRepo_HiddenReadLine_Call struct {
	*mock.Call
}

// HiddenReadLine is a helper method to define mock.On call
func (_e *TermRepo_Expecter) HiddenReadLine() *TermRepo_HiddenReadLine_Call {
	return &TermRepo_HiddenReadLine_Call{Call: _e.mock.On("HiddenReadLine")}
}

func (_c *TermRepo_HiddenReadLine_Call) Run(run func()) *TermRepo_HiddenReadLine_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TermRepo_HiddenReadLine_Call) Return(_a0 string, _a1 error) *TermRepo_HiddenReadLine_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TermRepo_HiddenReadLine_Call) RunAndReturn(run func() (string, error)) *TermRepo_HiddenReadLine_Call {
	_c.Call.Return(run)
	return _c
}

// Printf provides a mock function with given fields: format, v
func (_m *TermRepo) Printf(format string, v ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, format)
	_ca = append(_ca, v...)
	_m.Called(_ca...)
}

// TermRepo_Printf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Printf'
type TermRepo_Printf_Call struct {
	*mock.Call
}

// Printf is a helper method to define mock.On call
//   - format string
//   - v ...interface{}
func (_e *TermRepo_Expecter) Printf(format interface{}, v ...interface{}) *TermRepo_Printf_Call {
	return &TermRepo_Printf_Call{Call: _e.mock.On("Printf",
		append([]interface{}{format}, v...)...)}
}

func (_c *TermRepo_Printf_Call) Run(run func(format string, v ...interface{})) *TermRepo_Printf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *TermRepo_Printf_Call) Return() *TermRepo_Printf_Call {
	_c.Call.Return()
	return _c
}

func (_c *TermRepo_Printf_Call) RunAndReturn(run func(string, ...interface{})) *TermRepo_Printf_Call {
	_c.Run(run)
	return _c
}

// Println provides a mock function with given fields: v
func (_m *TermRepo) Println(v ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, v...)
	_m.Called(_ca...)
}

// TermRepo_Println_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Println'
type TermRepo_Println_Call struct {
	*mock.Call
}

// Println is a helper method to define mock.On call
//   - v ...interface{}
func (_e *TermRepo_Expecter) Println(v ...interface{}) *TermRepo_Println_Call {
	return &TermRepo_Println_Call{Call: _e.mock.On("Println",
		append([]interface{}{}, v...)...)}
}

func (_c *TermRepo_Println_Call) Run(run func(v ...interface{})) *TermRepo_Println_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *TermRepo_Println_Call) Return() *TermRepo_Println_Call {
	_c.Call.Return()
	return _c
}

func (_c *TermRepo_Println_Call) RunAndReturn(run func(...interface{})) *TermRepo_Println_Call {
	_c.Run(run)
	return _c
}

// ReadLine provides a mock function with no fields
func (_m *TermRepo) ReadLine() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ReadLine")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TermRepo_ReadLine_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadLine'
type TermRepo_ReadLine_Call struct {
	*mock.Call
}

// ReadLine is a helper method to define mock.On call
func (_e *TermRepo_Expecter) ReadLine() *TermRepo_ReadLine_Call {
	return &TermRepo_ReadLine_Call{Call: _e.mock.On("ReadLine")}
}

func (_c *TermRepo_ReadLine_Call) Run(run func()) *TermRepo_ReadLine_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TermRepo_ReadLine_Call) Return(_a0 string, _a1 error) *TermRepo_ReadLine_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TermRepo_ReadLine_Call) RunAndReturn(run func() (string, error)) *TermRepo_ReadLine_Call {
	_c.Call.Return(run)
	return _c
}

// NewTermRepo creates a new instance of TermRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTermRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *TermRepo {
	mock := &TermRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
