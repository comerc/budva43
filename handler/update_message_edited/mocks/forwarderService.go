// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	domain "github.com/comerc/budva43/app/domain"
	client "github.com/zelenin/go-tdlib/client"

	mock "github.com/stretchr/testify/mock"
)

// ForwarderService is an autogenerated mock type for the forwarderService type
type ForwarderService struct {
	mock.Mock
}

type ForwarderService_Expecter struct {
	mock *mock.Mock
}

func (_m *ForwarderService) EXPECT() *ForwarderService_Expecter {
	return &ForwarderService_Expecter{mock: &_m.Mock}
}

// ForwardMessages provides a mock function with given fields: messages, filtersMode, srcChatId, dstChatId, prevMessageId, isSendCopy, forwardRuleId, engineConfig
func (_m *ForwarderService) ForwardMessages(messages []*client.Message, filtersMode string, srcChatId int64, dstChatId int64, prevMessageId int64, isSendCopy bool, forwardRuleId string, engineConfig *domain.EngineConfig) {
	_m.Called(messages, filtersMode, srcChatId, dstChatId, prevMessageId, isSendCopy, forwardRuleId, engineConfig)
}

// ForwarderService_ForwardMessages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ForwardMessages'
type ForwarderService_ForwardMessages_Call struct {
	*mock.Call
}

// ForwardMessages is a helper method to define mock.On call
//   - messages []*client.Message
//   - filtersMode string
//   - srcChatId int64
//   - dstChatId int64
//   - prevMessageId int64
//   - isSendCopy bool
//   - forwardRuleId string
//   - engineConfig *domain.EngineConfig
func (_e *ForwarderService_Expecter) ForwardMessages(messages interface{}, filtersMode interface{}, srcChatId interface{}, dstChatId interface{}, prevMessageId interface{}, isSendCopy interface{}, forwardRuleId interface{}, engineConfig interface{}) *ForwarderService_ForwardMessages_Call {
	return &ForwarderService_ForwardMessages_Call{Call: _e.mock.On("ForwardMessages", messages, filtersMode, srcChatId, dstChatId, prevMessageId, isSendCopy, forwardRuleId, engineConfig)}
}

func (_c *ForwarderService_ForwardMessages_Call) Run(run func(messages []*client.Message, filtersMode string, srcChatId int64, dstChatId int64, prevMessageId int64, isSendCopy bool, forwardRuleId string, engineConfig *domain.EngineConfig)) *ForwarderService_ForwardMessages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]*client.Message), args[1].(string), args[2].(int64), args[3].(int64), args[4].(int64), args[5].(bool), args[6].(string), args[7].(*domain.EngineConfig))
	})
	return _c
}

func (_c *ForwarderService_ForwardMessages_Call) Return() *ForwarderService_ForwardMessages_Call {
	_c.Call.Return()
	return _c
}

func (_c *ForwarderService_ForwardMessages_Call) RunAndReturn(run func([]*client.Message, string, int64, int64, int64, bool, string, *domain.EngineConfig)) *ForwarderService_ForwardMessages_Call {
	_c.Run(run)
	return _c
}

// NewForwarderService creates a new instance of ForwarderService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewForwarderService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ForwarderService {
	mock := &ForwarderService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
