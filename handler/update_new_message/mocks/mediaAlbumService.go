// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	client "github.com/zelenin/go-tdlib/client"

	time "time"
)

// MediaAlbumService is an autogenerated mock type for the mediaAlbumService type
type MediaAlbumService struct {
	mock.Mock
}

type MediaAlbumService_Expecter struct {
	mock *mock.Mock
}

func (_m *MediaAlbumService) EXPECT() *MediaAlbumService_Expecter {
	return &MediaAlbumService_Expecter{mock: &_m.Mock}
}

// AddMessage provides a mock function with given fields: key, message
func (_m *MediaAlbumService) AddMessage(key string, message *client.Message) bool {
	ret := _m.Called(key, message)

	if len(ret) == 0 {
		panic("no return value specified for AddMessage")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, *client.Message) bool); ok {
		r0 = rf(key, message)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MediaAlbumService_AddMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddMessage'
type MediaAlbumService_AddMessage_Call struct {
	*mock.Call
}

// AddMessage is a helper method to define mock.On call
//   - key string
//   - message *client.Message
func (_e *MediaAlbumService_Expecter) AddMessage(key interface{}, message interface{}) *MediaAlbumService_AddMessage_Call {
	return &MediaAlbumService_AddMessage_Call{Call: _e.mock.On("AddMessage", key, message)}
}

func (_c *MediaAlbumService_AddMessage_Call) Run(run func(key string, message *client.Message)) *MediaAlbumService_AddMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*client.Message))
	})
	return _c
}

func (_c *MediaAlbumService_AddMessage_Call) Return(_a0 bool) *MediaAlbumService_AddMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MediaAlbumService_AddMessage_Call) RunAndReturn(run func(string, *client.Message) bool) *MediaAlbumService_AddMessage_Call {
	_c.Call.Return(run)
	return _c
}

// GetKey provides a mock function with given fields: forwardRuleId, MediaAlbumId
func (_m *MediaAlbumService) GetKey(forwardRuleId string, MediaAlbumId client.JsonInt64) string {
	ret := _m.Called(forwardRuleId, MediaAlbumId)

	if len(ret) == 0 {
		panic("no return value specified for GetKey")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string, client.JsonInt64) string); ok {
		r0 = rf(forwardRuleId, MediaAlbumId)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MediaAlbumService_GetKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetKey'
type MediaAlbumService_GetKey_Call struct {
	*mock.Call
}

// GetKey is a helper method to define mock.On call
//   - forwardRuleId string
//   - MediaAlbumId client.JsonInt64
func (_e *MediaAlbumService_Expecter) GetKey(forwardRuleId interface{}, MediaAlbumId interface{}) *MediaAlbumService_GetKey_Call {
	return &MediaAlbumService_GetKey_Call{Call: _e.mock.On("GetKey", forwardRuleId, MediaAlbumId)}
}

func (_c *MediaAlbumService_GetKey_Call) Run(run func(forwardRuleId string, MediaAlbumId client.JsonInt64)) *MediaAlbumService_GetKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(client.JsonInt64))
	})
	return _c
}

func (_c *MediaAlbumService_GetKey_Call) Return(_a0 string) *MediaAlbumService_GetKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MediaAlbumService_GetKey_Call) RunAndReturn(run func(string, client.JsonInt64) string) *MediaAlbumService_GetKey_Call {
	_c.Call.Return(run)
	return _c
}

// GetLastReceivedDiff provides a mock function with given fields: key
func (_m *MediaAlbumService) GetLastReceivedDiff(key string) time.Duration {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetLastReceivedDiff")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func(string) time.Duration); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// MediaAlbumService_GetLastReceivedDiff_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastReceivedDiff'
type MediaAlbumService_GetLastReceivedDiff_Call struct {
	*mock.Call
}

// GetLastReceivedDiff is a helper method to define mock.On call
//   - key string
func (_e *MediaAlbumService_Expecter) GetLastReceivedDiff(key interface{}) *MediaAlbumService_GetLastReceivedDiff_Call {
	return &MediaAlbumService_GetLastReceivedDiff_Call{Call: _e.mock.On("GetLastReceivedDiff", key)}
}

func (_c *MediaAlbumService_GetLastReceivedDiff_Call) Run(run func(key string)) *MediaAlbumService_GetLastReceivedDiff_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MediaAlbumService_GetLastReceivedDiff_Call) Return(_a0 time.Duration) *MediaAlbumService_GetLastReceivedDiff_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MediaAlbumService_GetLastReceivedDiff_Call) RunAndReturn(run func(string) time.Duration) *MediaAlbumService_GetLastReceivedDiff_Call {
	_c.Call.Return(run)
	return _c
}

// PopMessages provides a mock function with given fields: key
func (_m *MediaAlbumService) PopMessages(key string) []*client.Message {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for PopMessages")
	}

	var r0 []*client.Message
	if rf, ok := ret.Get(0).(func(string) []*client.Message); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*client.Message)
		}
	}

	return r0
}

// MediaAlbumService_PopMessages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PopMessages'
type MediaAlbumService_PopMessages_Call struct {
	*mock.Call
}

// PopMessages is a helper method to define mock.On call
//   - key string
func (_e *MediaAlbumService_Expecter) PopMessages(key interface{}) *MediaAlbumService_PopMessages_Call {
	return &MediaAlbumService_PopMessages_Call{Call: _e.mock.On("PopMessages", key)}
}

func (_c *MediaAlbumService_PopMessages_Call) Run(run func(key string)) *MediaAlbumService_PopMessages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MediaAlbumService_PopMessages_Call) Return(_a0 []*client.Message) *MediaAlbumService_PopMessages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MediaAlbumService_PopMessages_Call) RunAndReturn(run func(string) []*client.Message) *MediaAlbumService_PopMessages_Call {
	_c.Call.Return(run)
	return _c
}

// NewMediaAlbumService creates a new instance of MediaAlbumService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMediaAlbumService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MediaAlbumService {
	mock := &MediaAlbumService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
