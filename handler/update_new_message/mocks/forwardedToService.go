// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// ForwardedToService is an autogenerated mock type for the forwardedToService type
type ForwardedToService struct {
	mock.Mock
}

type ForwardedToService_Expecter struct {
	mock *mock.Mock
}

func (_m *ForwardedToService) EXPECT() *ForwardedToService_Expecter {
	return &ForwardedToService_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: forwardedTo, dstChatId
func (_m *ForwardedToService) Add(forwardedTo map[int64]bool, dstChatId int64) bool {
	ret := _m.Called(forwardedTo, dstChatId)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(map[int64]bool, int64) bool); ok {
		r0 = rf(forwardedTo, dstChatId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ForwardedToService_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type ForwardedToService_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - forwardedTo map[int64]bool
//   - dstChatId int64
func (_e *ForwardedToService_Expecter) Add(forwardedTo interface{}, dstChatId interface{}) *ForwardedToService_Add_Call {
	return &ForwardedToService_Add_Call{Call: _e.mock.On("Add", forwardedTo, dstChatId)}
}

func (_c *ForwardedToService_Add_Call) Run(run func(forwardedTo map[int64]bool, dstChatId int64)) *ForwardedToService_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[int64]bool), args[1].(int64))
	})
	return _c
}

func (_c *ForwardedToService_Add_Call) Return(_a0 bool) *ForwardedToService_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ForwardedToService_Add_Call) RunAndReturn(run func(map[int64]bool, int64) bool) *ForwardedToService_Add_Call {
	_c.Call.Return(run)
	return _c
}

// Init provides a mock function with given fields: forwardedTo, dstChatIds
func (_m *ForwardedToService) Init(forwardedTo map[int64]bool, dstChatIds []int64) {
	_m.Called(forwardedTo, dstChatIds)
}

// ForwardedToService_Init_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Init'
type ForwardedToService_Init_Call struct {
	*mock.Call
}

// Init is a helper method to define mock.On call
//   - forwardedTo map[int64]bool
//   - dstChatIds []int64
func (_e *ForwardedToService_Expecter) Init(forwardedTo interface{}, dstChatIds interface{}) *ForwardedToService_Init_Call {
	return &ForwardedToService_Init_Call{Call: _e.mock.On("Init", forwardedTo, dstChatIds)}
}

func (_c *ForwardedToService_Init_Call) Run(run func(forwardedTo map[int64]bool, dstChatIds []int64)) *ForwardedToService_Init_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[int64]bool), args[1].([]int64))
	})
	return _c
}

func (_c *ForwardedToService_Init_Call) Return() *ForwardedToService_Init_Call {
	_c.Call.Return()
	return _c
}

func (_c *ForwardedToService_Init_Call) RunAndReturn(run func(map[int64]bool, []int64)) *ForwardedToService_Init_Call {
	_c.Run(run)
	return _c
}

// NewForwardedToService creates a new instance of ForwardedToService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewForwardedToService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ForwardedToService {
	mock := &ForwardedToService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
