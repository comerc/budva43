// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// StorageService is an autogenerated mock type for the storageService type
type StorageService struct {
	mock.Mock
}

type StorageService_Expecter struct {
	mock *mock.Mock
}

func (_m *StorageService) EXPECT() *StorageService_Expecter {
	return &StorageService_Expecter{mock: &_m.Mock}
}

// SetNewMessageId provides a mock function with given fields: chatId, tmpMessageId, newMessageId
func (_m *StorageService) SetNewMessageId(chatId int64, tmpMessageId int64, newMessageId int64) {
	_m.Called(chatId, tmpMessageId, newMessageId)
}

// StorageService_SetNewMessageId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetNewMessageId'
type StorageService_SetNewMessageId_Call struct {
	*mock.Call
}

// SetNewMessageId is a helper method to define mock.On call
//   - chatId int64
//   - tmpMessageId int64
//   - newMessageId int64
func (_e *StorageService_Expecter) SetNewMessageId(chatId interface{}, tmpMessageId interface{}, newMessageId interface{}) *StorageService_SetNewMessageId_Call {
	return &StorageService_SetNewMessageId_Call{Call: _e.mock.On("SetNewMessageId", chatId, tmpMessageId, newMessageId)}
}

func (_c *StorageService_SetNewMessageId_Call) Run(run func(chatId int64, tmpMessageId int64, newMessageId int64)) *StorageService_SetNewMessageId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *StorageService_SetNewMessageId_Call) Return() *StorageService_SetNewMessageId_Call {
	_c.Call.Return()
	return _c
}

func (_c *StorageService_SetNewMessageId_Call) RunAndReturn(run func(int64, int64, int64)) *StorageService_SetNewMessageId_Call {
	_c.Run(run)
	return _c
}

// SetTmpMessageId provides a mock function with given fields: chatId, newMessageId, tmpMessageId
func (_m *StorageService) SetTmpMessageId(chatId int64, newMessageId int64, tmpMessageId int64) {
	_m.Called(chatId, newMessageId, tmpMessageId)
}

// StorageService_SetTmpMessageId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetTmpMessageId'
type StorageService_SetTmpMessageId_Call struct {
	*mock.Call
}

// SetTmpMessageId is a helper method to define mock.On call
//   - chatId int64
//   - newMessageId int64
//   - tmpMessageId int64
func (_e *StorageService_Expecter) SetTmpMessageId(chatId interface{}, newMessageId interface{}, tmpMessageId interface{}) *StorageService_SetTmpMessageId_Call {
	return &StorageService_SetTmpMessageId_Call{Call: _e.mock.On("SetTmpMessageId", chatId, newMessageId, tmpMessageId)}
}

func (_c *StorageService_SetTmpMessageId_Call) Run(run func(chatId int64, newMessageId int64, tmpMessageId int64)) *StorageService_SetTmpMessageId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *StorageService_SetTmpMessageId_Call) Return() *StorageService_SetTmpMessageId_Call {
	_c.Call.Return()
	return _c
}

func (_c *StorageService_SetTmpMessageId_Call) RunAndReturn(run func(int64, int64, int64)) *StorageService_SetTmpMessageId_Call {
	_c.Run(run)
	return _c
}

// NewStorageService creates a new instance of StorageService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorageService(t interface {
	mock.TestingT
	Cleanup(func())
}) *StorageService {
	mock := &StorageService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
