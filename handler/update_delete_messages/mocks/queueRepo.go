// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// QueueRepo is an autogenerated mock type for the queueRepo type
type QueueRepo struct {
	mock.Mock
}

type QueueRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *QueueRepo) EXPECT() *QueueRepo_Expecter {
	return &QueueRepo_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: task
func (_m *QueueRepo) Add(task func()) {
	_m.Called(task)
}

// QueueRepo_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type QueueRepo_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - task func()
func (_e *QueueRepo_Expecter) Add(task interface{}) *QueueRepo_Add_Call {
	return &QueueRepo_Add_Call{Call: _e.mock.On("Add", task)}
}

func (_c *QueueRepo_Add_Call) Run(run func(task func())) *QueueRepo_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func()))
	})
	return _c
}

func (_c *QueueRepo_Add_Call) Return() *QueueRepo_Add_Call {
	_c.Call.Return()
	return _c
}

func (_c *QueueRepo_Add_Call) RunAndReturn(run func(func())) *QueueRepo_Add_Call {
	_c.Run(run)
	return _c
}

// NewQueueRepo creates a new instance of QueueRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQueueRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *QueueRepo {
	mock := &QueueRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
