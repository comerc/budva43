// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// StorageService is an autogenerated mock type for the storageService type
type StorageService struct {
	mock.Mock
}

type StorageService_Expecter struct {
	mock *mock.Mock
}

func (_m *StorageService) EXPECT() *StorageService_Expecter {
	return &StorageService_Expecter{mock: &_m.Mock}
}

// DeleteAnswerMessageId provides a mock function with given fields: dstChatId, tmpMessageId
func (_m *StorageService) DeleteAnswerMessageId(dstChatId int64, tmpMessageId int64) {
	_m.Called(dstChatId, tmpMessageId)
}

// StorageService_DeleteAnswerMessageId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteAnswerMessageId'
type StorageService_DeleteAnswerMessageId_Call struct {
	*mock.Call
}

// DeleteAnswerMessageId is a helper method to define mock.On call
//   - dstChatId int64
//   - tmpMessageId int64
func (_e *StorageService_Expecter) DeleteAnswerMessageId(dstChatId interface{}, tmpMessageId interface{}) *StorageService_DeleteAnswerMessageId_Call {
	return &StorageService_DeleteAnswerMessageId_Call{Call: _e.mock.On("DeleteAnswerMessageId", dstChatId, tmpMessageId)}
}

func (_c *StorageService_DeleteAnswerMessageId_Call) Run(run func(dstChatId int64, tmpMessageId int64)) *StorageService_DeleteAnswerMessageId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int64))
	})
	return _c
}

func (_c *StorageService_DeleteAnswerMessageId_Call) Return() *StorageService_DeleteAnswerMessageId_Call {
	_c.Call.Return()
	return _c
}

func (_c *StorageService_DeleteAnswerMessageId_Call) RunAndReturn(run func(int64, int64)) *StorageService_DeleteAnswerMessageId_Call {
	_c.Run(run)
	return _c
}

// DeleteCopiedMessageIds provides a mock function with given fields: fromChatMessageId
func (_m *StorageService) DeleteCopiedMessageIds(fromChatMessageId string) {
	_m.Called(fromChatMessageId)
}

// StorageService_DeleteCopiedMessageIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteCopiedMessageIds'
type StorageService_DeleteCopiedMessageIds_Call struct {
	*mock.Call
}

// DeleteCopiedMessageIds is a helper method to define mock.On call
//   - fromChatMessageId string
func (_e *StorageService_Expecter) DeleteCopiedMessageIds(fromChatMessageId interface{}) *StorageService_DeleteCopiedMessageIds_Call {
	return &StorageService_DeleteCopiedMessageIds_Call{Call: _e.mock.On("DeleteCopiedMessageIds", fromChatMessageId)}
}

func (_c *StorageService_DeleteCopiedMessageIds_Call) Run(run func(fromChatMessageId string)) *StorageService_DeleteCopiedMessageIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *StorageService_DeleteCopiedMessageIds_Call) Return() *StorageService_DeleteCopiedMessageIds_Call {
	_c.Call.Return()
	return _c
}

func (_c *StorageService_DeleteCopiedMessageIds_Call) RunAndReturn(run func(string)) *StorageService_DeleteCopiedMessageIds_Call {
	_c.Run(run)
	return _c
}

// DeleteNewMessageId provides a mock function with given fields: chatId, tmpMessageId
func (_m *StorageService) DeleteNewMessageId(chatId int64, tmpMessageId int64) {
	_m.Called(chatId, tmpMessageId)
}

// StorageService_DeleteNewMessageId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteNewMessageId'
type StorageService_DeleteNewMessageId_Call struct {
	*mock.Call
}

// DeleteNewMessageId is a helper method to define mock.On call
//   - chatId int64
//   - tmpMessageId int64
func (_e *StorageService_Expecter) DeleteNewMessageId(chatId interface{}, tmpMessageId interface{}) *StorageService_DeleteNewMessageId_Call {
	return &StorageService_DeleteNewMessageId_Call{Call: _e.mock.On("DeleteNewMessageId", chatId, tmpMessageId)}
}

func (_c *StorageService_DeleteNewMessageId_Call) Run(run func(chatId int64, tmpMessageId int64)) *StorageService_DeleteNewMessageId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int64))
	})
	return _c
}

func (_c *StorageService_DeleteNewMessageId_Call) Return() *StorageService_DeleteNewMessageId_Call {
	_c.Call.Return()
	return _c
}

func (_c *StorageService_DeleteNewMessageId_Call) RunAndReturn(run func(int64, int64)) *StorageService_DeleteNewMessageId_Call {
	_c.Run(run)
	return _c
}

// DeleteTmpMessageId provides a mock function with given fields: chatId, newMessageId
func (_m *StorageService) DeleteTmpMessageId(chatId int64, newMessageId int64) {
	_m.Called(chatId, newMessageId)
}

// StorageService_DeleteTmpMessageId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTmpMessageId'
type StorageService_DeleteTmpMessageId_Call struct {
	*mock.Call
}

// DeleteTmpMessageId is a helper method to define mock.On call
//   - chatId int64
//   - newMessageId int64
func (_e *StorageService_Expecter) DeleteTmpMessageId(chatId interface{}, newMessageId interface{}) *StorageService_DeleteTmpMessageId_Call {
	return &StorageService_DeleteTmpMessageId_Call{Call: _e.mock.On("DeleteTmpMessageId", chatId, newMessageId)}
}

func (_c *StorageService_DeleteTmpMessageId_Call) Run(run func(chatId int64, newMessageId int64)) *StorageService_DeleteTmpMessageId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int64))
	})
	return _c
}

func (_c *StorageService_DeleteTmpMessageId_Call) Return() *StorageService_DeleteTmpMessageId_Call {
	_c.Call.Return()
	return _c
}

func (_c *StorageService_DeleteTmpMessageId_Call) RunAndReturn(run func(int64, int64)) *StorageService_DeleteTmpMessageId_Call {
	_c.Run(run)
	return _c
}

// GetCopiedMessageIds provides a mock function with given fields: fromChatMessageId
func (_m *StorageService) GetCopiedMessageIds(fromChatMessageId string) []string {
	ret := _m.Called(fromChatMessageId)

	if len(ret) == 0 {
		panic("no return value specified for GetCopiedMessageIds")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(fromChatMessageId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// StorageService_GetCopiedMessageIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCopiedMessageIds'
type StorageService_GetCopiedMessageIds_Call struct {
	*mock.Call
}

// GetCopiedMessageIds is a helper method to define mock.On call
//   - fromChatMessageId string
func (_e *StorageService_Expecter) GetCopiedMessageIds(fromChatMessageId interface{}) *StorageService_GetCopiedMessageIds_Call {
	return &StorageService_GetCopiedMessageIds_Call{Call: _e.mock.On("GetCopiedMessageIds", fromChatMessageId)}
}

func (_c *StorageService_GetCopiedMessageIds_Call) Run(run func(fromChatMessageId string)) *StorageService_GetCopiedMessageIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *StorageService_GetCopiedMessageIds_Call) Return(_a0 []string) *StorageService_GetCopiedMessageIds_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StorageService_GetCopiedMessageIds_Call) RunAndReturn(run func(string) []string) *StorageService_GetCopiedMessageIds_Call {
	_c.Call.Return(run)
	return _c
}

// GetNewMessageId provides a mock function with given fields: chatId, tmpMessageId
func (_m *StorageService) GetNewMessageId(chatId int64, tmpMessageId int64) int64 {
	ret := _m.Called(chatId, tmpMessageId)

	if len(ret) == 0 {
		panic("no return value specified for GetNewMessageId")
	}

	var r0 int64
	if rf, ok := ret.Get(0).(func(int64, int64) int64); ok {
		r0 = rf(chatId, tmpMessageId)
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// StorageService_GetNewMessageId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNewMessageId'
type StorageService_GetNewMessageId_Call struct {
	*mock.Call
}

// GetNewMessageId is a helper method to define mock.On call
//   - chatId int64
//   - tmpMessageId int64
func (_e *StorageService_Expecter) GetNewMessageId(chatId interface{}, tmpMessageId interface{}) *StorageService_GetNewMessageId_Call {
	return &StorageService_GetNewMessageId_Call{Call: _e.mock.On("GetNewMessageId", chatId, tmpMessageId)}
}

func (_c *StorageService_GetNewMessageId_Call) Run(run func(chatId int64, tmpMessageId int64)) *StorageService_GetNewMessageId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(int64))
	})
	return _c
}

func (_c *StorageService_GetNewMessageId_Call) Return(_a0 int64) *StorageService_GetNewMessageId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *StorageService_GetNewMessageId_Call) RunAndReturn(run func(int64, int64) int64) *StorageService_GetNewMessageId_Call {
	_c.Call.Return(run)
	return _c
}

// NewStorageService creates a new instance of StorageService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorageService(t interface {
	mock.TestingT
	Cleanup(func())
}) *StorageService {
	mock := &StorageService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
